<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - CUEH ComSec</title><link>https://cov-comsec.github.io/posts/</link><description>All Posts | CUEH ComSec</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 23 Mar 2023 12:40:28 +0100</lastBuildDate><atom:link href="https://cov-comsec.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>Writeup: Hack The Box Cyber Apocalypse 2023 - The Cursed Mission</title><link>https://cov-comsec.github.io/posts/2023_hackthebox_cyberapoc/</link><pubDate>Thu, 23 Mar 2023 12:40:28 +0100</pubDate><author>Author</author><guid>https://cov-comsec.github.io/posts/2023_hackthebox_cyberapoc/</guid><description>The HackTheBox Cyber Apocalypse has become a staple annual event of the ComSec CTF calendar, though this year a couple of changed were introduced - such as the maximum team size and average difficulty of the challenges. This post contains some challenges
Contents
Contents
rev: Alien Saboteur Understanding the VM Reversing the VM Program - bin Getting the First Password Unravelling more Code Finding the Flag pwn: Control Room Configure Engine Exploitation rev: Alien Saboteur Solved by Ben R, this was rated a medium difficulty challenge, and his personal favourite challenge in the CTF.</description></item><item><title>DownUnder CTF 2022</title><link>https://cov-comsec.github.io/posts/down-under-ctf-2022/</link><pubDate>Wed, 10 Aug 2022 12:40:28 +0100</pubDate><author>Author</author><guid>https://cov-comsec.github.io/posts/down-under-ctf-2022/</guid><description>DownUnder CTF was a 48 hour CTF that began on Friday 23rd September 2022. It was the first CTF of the year that ComSec played, we had quite a few new members playing this one so it was a great chance for them to practice their skills.
This article contains writeups of a range of difficulty and category, so this should be a good place for new members to see what a jeopardy style CTF looks like.</description></item><item><title>Log and PATH Poisoning</title><link>https://cov-comsec.github.io/posts/2022_log_and_path_poisoning/</link><pubDate>Wed, 13 Apr 2022 21:15:26 +0800</pubDate><author>Author</author><guid>https://cov-comsec.github.io/posts/2022_log_and_path_poisoning/</guid><description>In this session we talked about log files, the PATH variable and how an attacker could exploit them. Briefly, the PATH is a system variable unique to UNIX systems which defines the hierarchy that the CPU uses to find executable binaries. If someone were to prepend or append a valid directory to the PATH, then the CPU would consider it as a valid location to find binaries in. Similarly, log files can be used as a vector for code execution if the permissions were to be misconfigured.</description></item><item><title>SQL Injection</title><link>https://cov-comsec.github.io/posts/2021_sqli/</link><pubDate>Wed, 02 Mar 2022 12:40:28 +0100</pubDate><author>Author</author><guid>https://cov-comsec.github.io/posts/2021_sqli/</guid><description>SQL Injection Further on today, we will be using THM If you haven&amp;rsquo;t registered go to tryhackme.com Ensure you have the VPN file or AttackBox ready SQL Structured Query Language (SQL) is used to communicate with databases and has the capability to delete, edit, insert or retrieve data. There are a few variations of SQL which have some slight syntactical differences. A few examples are MySQL, SQL Server and SQLite.</description></item><item><title>Exploiting Race Conditions</title><link>https://cov-comsec.github.io/posts/2022_race_conditions/</link><pubDate>Thu, 17 Feb 2022 08:40:28 +0100</pubDate><author>Author</author><guid>https://cov-comsec.github.io/posts/2022_race_conditions/</guid><description>During this session we discussed the concept of race conditions in various forms, and how an attacker could exploit them. To recap, as race condition takes advantage of the fact that a system must execute a process in a specific sequence of steps, but due to the nature of modern systems there is an opportunity to alter the environment in which a process in run during this sequence of events. One common form of race condition is a Time-of-Check, Time-of-Use vulnerability (TOCTOU).</description></item><item><title>Twelvetide CTF</title><link>https://cov-comsec.github.io/posts/2021_twelvetide/</link><pubDate>Tue, 14 Dec 2021 12:40:28 +0100</pubDate><author>Author</author><guid>https://cov-comsec.github.io/posts/2021_twelvetide/</guid><description>Hi everyone,
Hope you&amp;rsquo;re all enjoying yourselves now that coursework deadlines have passed. As Christmas approaches ComSec would like to announce the dates of our Christmas CTF - Twelvetide.
The CTF will last 15 days, with new challenges released every day for the first 12 days. Difficulty will range from entry-level to intermediate, so make sure you sign on and give it a go!
More details will be released on the ComSec discord in coming days.</description></item><item><title>Walkthrough: Shellcoding Challenges</title><link>https://cov-comsec.github.io/posts/2021_assembly_and_shellcoding_walkthrough/</link><pubDate>Sun, 07 Nov 2021 10:40:28 +0100</pubDate><author>Author</author><guid>https://cov-comsec.github.io/posts/2021_assembly_and_shellcoding_walkthrough/</guid><description>As promised by Ben in Assembly &amp;amp; Shellcoding, this article will cover the solutions for the Shellcode challenges. The challenges can be found on CTFd and is strongly recommended to try to solve the challenges on your own before continue reading this article!
Preparation for the challenges Each of the following challenges will require you to send your already assembled code to the target; whose ip address and port is specified in the description of each challenge on CTFd.</description></item><item><title>Introduction to Stack Smashing</title><link>https://cov-comsec.github.io/posts/2021_stack_smashing/</link><pubDate>Thu, 04 Nov 2021 12:40:28 +0100</pubDate><author>Author</author><guid>https://cov-comsec.github.io/posts/2021_stack_smashing/</guid><description>This week, Ben introduced the concept of stack smashing, demonstrating the most basic form of buffer overflow attacks, the stack smash.
Presentation slides here
The term stack smashing was first coined in the Phrack article Smashing the Stack for Fun and Profit. It is a term used to describe the technique of overflowing a buffer, writing shellcode onto the stack (and sometimes a NOP sled), and then overwriting the return address of a the stack frame with the address near the start of the payload.</description></item><item><title>Reverse Engineering Basics</title><link>https://cov-comsec.github.io/posts/2021_reverse_engineering/</link><pubDate>Thu, 28 Oct 2021 12:40:28 +0100</pubDate><author>Author</author><guid>https://cov-comsec.github.io/posts/2021_reverse_engineering/</guid><description>The session at ComSec this week went into some basic reverse engineering methods. Ben did a demo with some challenges, and then we released some CTF challenges to solve.
Credential Leak via Memory Inspection The first demo showed how we can use a decompiler to understand how a binary functions, and then use a debugger to inspect memory at runtime in order to find credentials. You can download the demo binary here.</description></item><item><title>Assembly &amp; Shellcoding</title><link>https://cov-comsec.github.io/posts/2021_assembly_and_shellcoding/</link><pubDate>Wed, 20 Oct 2021 12:40:28 +0100</pubDate><author>Author</author><guid>https://cov-comsec.github.io/posts/2021_assembly_and_shellcoding/</guid><description>This week Ben led a session on some basic assembly shellcoding. The first section of the session covered some foundational theory content on CPU architecture, registers, and memory. After this, assembly was introduced - we used x86_64 assembly with Intel syntax. In this article we will go through one method of solving each assembly challenge. The shellcode solutions will be released at a later date.
You can download the presentation here.</description></item></channel></rss>